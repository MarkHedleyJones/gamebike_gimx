
emu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  000010a4  00001138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  00800182  00800182  000011ba  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000011ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f13  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001312  00000000  00000000  000063df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003034  00000000  00000000  000076f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a4  00000000  00000000  0000a728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c0c  00000000  00000000  0000aecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f54  00000000  00000000  0000cad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d8  00000000  00000000  0000fa2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	15 c1       	rjmp	.+554    	; 0x22c <__ctors_end>
       2:	00 00       	nop
       4:	2e c1       	rjmp	.+604    	; 0x262 <__bad_interrupt>
       6:	00 00       	nop
       8:	2c c1       	rjmp	.+600    	; 0x262 <__bad_interrupt>
       a:	00 00       	nop
       c:	2a c1       	rjmp	.+596    	; 0x262 <__bad_interrupt>
       e:	00 00       	nop
      10:	28 c1       	rjmp	.+592    	; 0x262 <__bad_interrupt>
      12:	00 00       	nop
      14:	26 c1       	rjmp	.+588    	; 0x262 <__bad_interrupt>
      16:	00 00       	nop
      18:	24 c1       	rjmp	.+584    	; 0x262 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	22 c1       	rjmp	.+580    	; 0x262 <__bad_interrupt>
      1e:	00 00       	nop
      20:	20 c1       	rjmp	.+576    	; 0x262 <__bad_interrupt>
      22:	00 00       	nop
      24:	1e c1       	rjmp	.+572    	; 0x262 <__bad_interrupt>
      26:	00 00       	nop
      28:	fc c5       	rjmp	.+3064   	; 0xc22 <__vector_10>
      2a:	00 00       	nop
      2c:	1a c1       	rjmp	.+564    	; 0x262 <__bad_interrupt>
      2e:	00 00       	nop
      30:	18 c1       	rjmp	.+560    	; 0x262 <__bad_interrupt>
      32:	00 00       	nop
      34:	16 c1       	rjmp	.+556    	; 0x262 <__bad_interrupt>
      36:	00 00       	nop
      38:	14 c1       	rjmp	.+552    	; 0x262 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	12 c1       	rjmp	.+548    	; 0x262 <__bad_interrupt>
      3e:	00 00       	nop
      40:	10 c1       	rjmp	.+544    	; 0x262 <__bad_interrupt>
      42:	00 00       	nop
      44:	0e c1       	rjmp	.+540    	; 0x262 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c c1       	rjmp	.+536    	; 0x262 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0a c1       	rjmp	.+532    	; 0x262 <__bad_interrupt>
      4e:	00 00       	nop
      50:	08 c1       	rjmp	.+528    	; 0x262 <__bad_interrupt>
      52:	00 00       	nop
      54:	06 c1       	rjmp	.+524    	; 0x262 <__bad_interrupt>
      56:	00 00       	nop
      58:	04 c1       	rjmp	.+520    	; 0x262 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	02 c1       	rjmp	.+516    	; 0x262 <__bad_interrupt>
      5e:	00 00       	nop
      60:	00 c1       	rjmp	.+512    	; 0x262 <__bad_interrupt>
      62:	00 00       	nop
      64:	2b c1       	rjmp	.+598    	; 0x2bc <__vector_25>
      66:	00 00       	nop
      68:	fc c0       	rjmp	.+504    	; 0x262 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	fa c0       	rjmp	.+500    	; 0x262 <__bad_interrupt>
      6e:	00 00       	nop
      70:	f8 c0       	rjmp	.+496    	; 0x262 <__bad_interrupt>
      72:	00 00       	nop
      74:	f6 c0       	rjmp	.+492    	; 0x262 <__bad_interrupt>
      76:	00 00       	nop
      78:	f4 c0       	rjmp	.+488    	; 0x262 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	f2 c0       	rjmp	.+484    	; 0x262 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f0 c0       	rjmp	.+480    	; 0x262 <__bad_interrupt>
      82:	00 00       	nop
      84:	ee c0       	rjmp	.+476    	; 0x262 <__bad_interrupt>
      86:	00 00       	nop
      88:	ec c0       	rjmp	.+472    	; 0x262 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ea c0       	rjmp	.+468    	; 0x262 <__bad_interrupt>
      8e:	00 00       	nop
      90:	e8 c0       	rjmp	.+464    	; 0x262 <__bad_interrupt>
      92:	00 00       	nop
      94:	e6 c0       	rjmp	.+460    	; 0x262 <__bad_interrupt>
      96:	00 00       	nop
      98:	e4 c0       	rjmp	.+456    	; 0x262 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e2 c0       	rjmp	.+452    	; 0x262 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	e0 c0       	rjmp	.+448    	; 0x262 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	de c0       	rjmp	.+444    	; 0x262 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	dc c0       	rjmp	.+440    	; 0x262 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	fe 06       	cpc	r15, r30
      ae:	20 07       	cpc	r18, r16
      b0:	07 08       	sbc	r0, r7
      b2:	20 07       	cpc	r18, r16
      b4:	07 08       	sbc	r0, r7
      b6:	65 07       	cpc	r22, r21
      b8:	87 07       	cpc	r24, r23
      ba:	07 08       	sbc	r0, r7
      bc:	d9 07       	cpc	r29, r25
      be:	eb 07       	cpc	r30, r27

000000c0 <__trampolines_end>:
      c0:	03 21       	and	r16, r3
      c2:	27 03       	mulsu	r18, r23
      c4:	11 06       	cpc	r1, r17
      c6:	00 00       	nop
      c8:	00 00       	nop
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	00 00       	nop
      d2:	0d 0d       	add	r16, r13
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	0d 84       	ldd	r0, Y+13	; 0x0d
      da:	03 00       	.word	0x0003	; ????
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	00 00       	nop
      ea:	00 00       	nop
      ec:	00 00       	nop
      ee:	00 00       	nop

000000f0 <buff3>:
      f0:	f3 00 38 38 00 00 00 00                             ..88....

000000f8 <ProductString>:
      f8:	3e 03 47 00 32 00 39 00 20 00 44 00 72 00 69 00     >.G.2.9. .D.r.i.
     108:	76 00 69 00 6e 00 67 00 20 00 46 00 6f 00 72 00     v.i.n.g. .F.o.r.
     118:	63 00 65 00 20 00 52 00 61 00 63 00 69 00 6e 00     c.e. .R.a.c.i.n.
     128:	67 00 20 00 57 00 68 00 65 00 65 00 6c 00 00 00     g. .W.h.e.e.l...

00000138 <ManufacturerString>:
     138:	12 03 4c 00 6f 00 67 00 69 00 74 00 65 00 63 00     ..L.o.g.i.t.e.c.
     148:	68 00 00 00                                         h...

0000014c <LanguageString>:
     14c:	04 03 09 04                                         ....

00000150 <ConfigurationDescriptor>:
     150:	09 02 29 00 01 01 00 c0 64 09 04 00 00 02 03 00     ..).....d.......
     160:	00 00 09 21 10 01 00 01 22 a0 00 07 05 84 03 40     ...!...."......@
     170:	00 05 07 05 03 03 40 00 05                          ......@..

00000179 <DeviceDescriptor>:
     179:	12 01 00 01 00 00 00 40 6d 04 60 c2 00 89 01 02     .......@m.`.....
     189:	00 01                                               ..

0000018b <Report>:
     18b:	05 01 09 04 a1 01 85 01 09 30 09 31 09 32 09 35     .........0.1.2.5
     19b:	15 00 26 ff 00 75 08 95 04 81 02 09 39 15 00 25     ..&..u......9..%
     1ab:	07 35 00 46 3b 01 65 14 75 04 95 01 81 42 65 00     .5.F;.e.u....Be.
     1bb:	05 09 19 01 29 0e 15 00 25 01 75 01 95 0e 81 02     ....)...%.u.....
     1cb:	06 00 ff 09 20 75 06 95 01 81 02 05 01 09 33 09     .... u........3.
     1db:	34 15 00 26 ff 00 75 08 95 02 81 02 06 00 ff 09     4..&..u.........
     1eb:	21 95 36 81 02 85 05 09 22 95 1f 91 02 85 03 0a     !.6.....".......
     1fb:	21 27 95 2f b1 02 c0 06 f0 ff 09 40 a1 01 85 f0     !'./.......@....
     20b:	09 47 95 3f b1 02 85 f1 09 48 95 3f b1 02 85 f2     .G.?.....H.?....
     21b:	09 49 95 0f b1 02 85 f3 0a 01 47 95 07 b1 02 c0     .I........G.....
     22b:	00                                                  .

0000022c <__ctors_end>:
     22c:	11 24       	eor	r1, r1
     22e:	1f be       	out	0x3f, r1	; 63
     230:	cf ef       	ldi	r28, 0xFF	; 255
     232:	da e0       	ldi	r29, 0x0A	; 10
     234:	de bf       	out	0x3e, r29	; 62
     236:	cd bf       	out	0x3d, r28	; 61

00000238 <__do_copy_data>:
     238:	11 e0       	ldi	r17, 0x01	; 1
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b1 e0       	ldi	r27, 0x01	; 1
     23e:	e4 ea       	ldi	r30, 0xA4	; 164
     240:	f0 e1       	ldi	r31, 0x10	; 16
     242:	02 c0       	rjmp	.+4      	; 0x248 <__do_copy_data+0x10>
     244:	05 90       	lpm	r0, Z+
     246:	0d 92       	st	X+, r0
     248:	a2 38       	cpi	r26, 0x82	; 130
     24a:	b1 07       	cpc	r27, r17
     24c:	d9 f7       	brne	.-10     	; 0x244 <__do_copy_data+0xc>

0000024e <__do_clear_bss>:
     24e:	22 e0       	ldi	r18, 0x02	; 2
     250:	a2 e8       	ldi	r26, 0x82	; 130
     252:	b1 e0       	ldi	r27, 0x01	; 1
     254:	01 c0       	rjmp	.+2      	; 0x258 <.do_clear_bss_start>

00000256 <.do_clear_bss_loop>:
     256:	1d 92       	st	X+, r1

00000258 <.do_clear_bss_start>:
     258:	a9 31       	cpi	r26, 0x19	; 25
     25a:	b2 07       	cpc	r27, r18
     25c:	e1 f7       	brne	.-8      	; 0x256 <.do_clear_bss_loop>
     25e:	1e d2       	rcall	.+1084   	; 0x69c <main>
     260:	1f c7       	rjmp	.+3646   	; 0x10a0 <_exit>

00000262 <__bad_interrupt>:
     262:	ce ce       	rjmp	.-612    	; 0x0 <__vectors>

00000264 <send_spoof_header>:
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     264:	80 91 c8 00 	lds	r24, 0x00C8
     268:	85 ff       	sbrs	r24, 5
     26a:	fc cf       	rjmp	.-8      	; 0x264 <send_spoof_header>
				UDR1 = DataByte;
     26c:	84 e4       	ldi	r24, 0x44	; 68
     26e:	80 93 ce 00 	sts	0x00CE, r24
}

static inline void send_spoof_header(void)
{
  Serial_SendByte(BYTE_CONTROL_DATA);
  if( USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST )
     272:	80 91 11 02 	lds	r24, 0x0211
     276:	87 ff       	sbrs	r24, 7
     278:	06 c0       	rjmp	.+12     	; 0x286 <send_spoof_header+0x22>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     27a:	80 91 c8 00 	lds	r24, 0x00C8
     27e:	85 ff       	sbrs	r24, 5
     280:	fc cf       	rjmp	.-8      	; 0x27a <send_spoof_header+0x16>
				UDR1 = DataByte;
     282:	88 e0       	ldi	r24, 0x08	; 8
     284:	07 c0       	rjmp	.+14     	; 0x294 <send_spoof_header+0x30>
  {
    Serial_SendByte(sizeof(USB_ControlRequest));
  }
  else
  {
    Serial_SendByte(sizeof(USB_ControlRequest) + (USB_ControlRequest.wLength & 0xFF));
     286:	80 91 17 02 	lds	r24, 0x0217
     28a:	88 5f       	subi	r24, 0xF8	; 248
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     28c:	90 91 c8 00 	lds	r25, 0x00C8
     290:	95 ff       	sbrs	r25, 5
     292:	fc cf       	rjmp	.-8      	; 0x28c <send_spoof_header+0x28>
				UDR1 = DataByte;
     294:	80 93 ce 00 	sts	0x00CE, r24
  }
  Serial_SendData(&USB_ControlRequest, sizeof(USB_ControlRequest));
     298:	68 e0       	ldi	r22, 0x08	; 8
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	81 e1       	ldi	r24, 0x11	; 17
     29e:	92 e0       	ldi	r25, 0x02	; 2
     2a0:	e9 c6       	rjmp	.+3538   	; 0x1074 <Serial_SendData>

000002a2 <forceHardReset>:
static volatile unsigned char spoofReply = 0;
static volatile unsigned char spoofReplyLen = 0;

void forceHardReset(void)
{
  LED_ON;
     2a2:	5e 9a       	sbi	0x0b, 6	; 11
  cli(); // disable interrupts
     2a4:	f8 94       	cli
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
     2a6:	98 e0       	ldi	r25, 0x08	; 8
     2a8:	88 e1       	ldi	r24, 0x18	; 24
     2aa:	0f b6       	in	r0, 0x3f	; 63
     2ac:	f8 94       	cli
     2ae:	a8 95       	wdr
     2b0:	80 93 60 00 	sts	0x0060, r24
     2b4:	0f be       	out	0x3f, r0	; 63
     2b6:	90 93 60 00 	sts	0x0060, r25
  wdt_enable(WDTO_15MS); // enable watchdog
  while(1); // wait for watchdog to reset processor
     2ba:	ff cf       	rjmp	.-2      	; 0x2ba <forceHardReset+0x18>

000002bc <__vector_25>:
}

static unsigned char buf[MAX_CONTROL_TRANSFER_SIZE];

ISR(USART1_RX_vect)
{
     2bc:	1f 92       	push	r1
     2be:	0f 92       	push	r0
     2c0:	0f b6       	in	r0, 0x3f	; 63
     2c2:	0f 92       	push	r0
     2c4:	11 24       	eor	r1, r1
     2c6:	2f 93       	push	r18
     2c8:	3f 93       	push	r19
     2ca:	4f 93       	push	r20
     2cc:	5f 93       	push	r21
     2ce:	6f 93       	push	r22
     2d0:	7f 93       	push	r23
     2d2:	8f 93       	push	r24
     2d4:	9f 93       	push	r25
     2d6:	af 93       	push	r26
     2d8:	bf 93       	push	r27
     2da:	ef 93       	push	r30
     2dc:	ff 93       	push	r31
  packet_type = UDR1;
     2de:	80 91 ce 00 	lds	r24, 0x00CE
     2e2:	80 93 05 02 	sts	0x0205, r24
			 *  \return Boolean \c true if a character has been received, \c false otherwise.
			 */
			static inline bool Serial_IsCharReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Serial_IsCharReceived(void)
			{
				return ((UCSR1A & (1 << RXC1)) ? true : false);
     2e6:	80 91 c8 00 	lds	r24, 0x00C8
  while(1); // wait for watchdog to reset processor
}

static inline int16_t Serial_BlockingReceiveByte(void)
{
  while(!Serial_IsCharReceived());
     2ea:	87 ff       	sbrs	r24, 7
     2ec:	fc cf       	rjmp	.-8      	; 0x2e6 <__vector_25+0x2a>
  return UDR1;
     2ee:	80 91 ce 00 	lds	r24, 0x00CE
static unsigned char buf[MAX_CONTROL_TRANSFER_SIZE];

ISR(USART1_RX_vect)
{
  packet_type = UDR1;
  value_len = Serial_BlockingReceiveByte();
     2f2:	80 93 04 02 	sts	0x0204, r24
  if(packet_type == BYTE_IN_REPORT)
     2f6:	80 91 05 02 	lds	r24, 0x0205
     2fa:	8f 3f       	cpi	r24, 0xFF	; 255
     2fc:	19 f4       	brne	.+6      	; 0x304 <__vector_25+0x48>
  {
    pdata = report;
     2fe:	82 e4       	ldi	r24, 0x42	; 66
     300:	91 e0       	ldi	r25, 0x01	; 1
     302:	02 c0       	rjmp	.+4      	; 0x308 <__vector_25+0x4c>
  }
  else
  {
    pdata = buf;
     304:	82 ec       	ldi	r24, 0xC2	; 194
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	90 93 0a 02 	sts	0x020A, r25
     30c:	80 93 09 02 	sts	0x0209, r24
  }
  while(i < value_len)
  {
    pdata[i++] = Serial_BlockingReceiveByte();
     310:	20 91 09 02 	lds	r18, 0x0209
     314:	30 91 0a 02 	lds	r19, 0x020A
  }
  else
  {
    pdata = buf;
  }
  while(i < value_len)
     318:	80 91 08 02 	lds	r24, 0x0208
     31c:	90 91 04 02 	lds	r25, 0x0204
     320:	89 17       	cp	r24, r25
     322:	78 f4       	brcc	.+30     	; 0x342 <__vector_25+0x86>
  {
    pdata[i++] = Serial_BlockingReceiveByte();
     324:	91 e0       	ldi	r25, 0x01	; 1
     326:	98 0f       	add	r25, r24
     328:	90 93 08 02 	sts	0x0208, r25
     32c:	f9 01       	movw	r30, r18
     32e:	e8 0f       	add	r30, r24
     330:	f1 1d       	adc	r31, r1
     332:	80 91 c8 00 	lds	r24, 0x00C8
  while(1); // wait for watchdog to reset processor
}

static inline int16_t Serial_BlockingReceiveByte(void)
{
  while(!Serial_IsCharReceived());
     336:	87 ff       	sbrs	r24, 7
     338:	fc cf       	rjmp	.-8      	; 0x332 <__vector_25+0x76>
  return UDR1;
     33a:	80 91 ce 00 	lds	r24, 0x00CE
  {
    pdata = buf;
  }
  while(i < value_len)
  {
    pdata[i++] = Serial_BlockingReceiveByte();
     33e:	80 83       	st	Z, r24
     340:	eb cf       	rjmp	.-42     	; 0x318 <__vector_25+0x5c>
  }
  i = 0;
     342:	10 92 08 02 	sts	0x0208, r1
  Serial_SendData(&USB_ControlRequest, sizeof(USB_ControlRequest));
}

static inline void handle_packet(void)
{
  switch(packet_type)
     346:	80 91 05 02 	lds	r24, 0x0205
     34a:	83 33       	cpi	r24, 0x33	; 51
     34c:	09 f4       	brne	.+2      	; 0x350 <__vector_25+0x94>
     34e:	42 c0       	rjmp	.+132    	; 0x3d4 <__vector_25+0x118>
     350:	28 f4       	brcc	.+10     	; 0x35c <__vector_25+0xa0>
     352:	81 31       	cpi	r24, 0x11	; 17
     354:	a1 f0       	breq	.+40     	; 0x37e <__vector_25+0xc2>
     356:	82 32       	cpi	r24, 0x22	; 34
     358:	31 f1       	breq	.+76     	; 0x3a6 <__vector_25+0xea>
     35a:	5a c0       	rjmp	.+180    	; 0x410 <__vector_25+0x154>
     35c:	85 35       	cpi	r24, 0x55	; 85
     35e:	09 f4       	brne	.+2      	; 0x362 <__vector_25+0xa6>
     360:	53 c0       	rjmp	.+166    	; 0x408 <__vector_25+0x14c>
     362:	8f 3f       	cpi	r24, 0xFF	; 255
     364:	09 f4       	brne	.+2      	; 0x368 <__vector_25+0xac>
     366:	51 c0       	rjmp	.+162    	; 0x40a <__vector_25+0x14e>
     368:	84 34       	cpi	r24, 0x44	; 68
     36a:	09 f0       	breq	.+2      	; 0x36e <__vector_25+0xb2>
     36c:	51 c0       	rjmp	.+162    	; 0x410 <__vector_25+0x154>
      Serial_SendByte(BYTE_LEN_1_BYTE);
      Serial_SendByte(started);
      started = 1;
      break;
    case BYTE_CONTROL_DATA:
      spoofReply = 1;
     36e:	81 e0       	ldi	r24, 0x01	; 1
     370:	80 93 03 02 	sts	0x0203, r24
      spoofReplyLen = value_len;
     374:	80 91 04 02 	lds	r24, 0x0204
     378:	80 93 02 02 	sts	0x0202, r24
     37c:	49 c0       	rjmp	.+146    	; 0x410 <__vector_25+0x154>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     37e:	80 91 c8 00 	lds	r24, 0x00C8
     382:	85 ff       	sbrs	r24, 5
     384:	fc cf       	rjmp	.-8      	; 0x37e <__vector_25+0xc2>
				UDR1 = DataByte;
     386:	81 e1       	ldi	r24, 0x11	; 17
     388:	80 93 ce 00 	sts	0x00CE, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     38c:	80 91 c8 00 	lds	r24, 0x00C8
     390:	85 ff       	sbrs	r24, 5
     392:	fc cf       	rjmp	.-8      	; 0x38c <__vector_25+0xd0>
				UDR1 = DataByte;
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	80 93 ce 00 	sts	0x00CE, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     39a:	80 91 c8 00 	lds	r24, 0x00C8
     39e:	85 ff       	sbrs	r24, 5
     3a0:	fc cf       	rjmp	.-8      	; 0x39a <__vector_25+0xde>
				UDR1 = DataByte;
     3a2:	89 e0       	ldi	r24, 0x09	; 9
     3a4:	14 c0       	rjmp	.+40     	; 0x3ce <__vector_25+0x112>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3a6:	80 91 c8 00 	lds	r24, 0x00C8
     3aa:	85 ff       	sbrs	r24, 5
     3ac:	fc cf       	rjmp	.-8      	; 0x3a6 <__vector_25+0xea>
				UDR1 = DataByte;
     3ae:	82 e2       	ldi	r24, 0x22	; 34
     3b0:	80 93 ce 00 	sts	0x00CE, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3b4:	80 91 c8 00 	lds	r24, 0x00C8
     3b8:	85 ff       	sbrs	r24, 5
     3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <__vector_25+0xf8>
				UDR1 = DataByte;
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	80 93 ce 00 	sts	0x00CE, r24
      Serial_SendByte(BYTE_TYPE_G29_PS4);
      break;
    case BYTE_STATUS:
      Serial_SendByte(BYTE_STATUS);
      Serial_SendByte(BYTE_LEN_1_BYTE);
      Serial_SendByte(started);
     3c2:	80 91 06 02 	lds	r24, 0x0206
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3c6:	90 91 c8 00 	lds	r25, 0x00C8
     3ca:	95 ff       	sbrs	r25, 5
     3cc:	fc cf       	rjmp	.-8      	; 0x3c6 <__vector_25+0x10a>
				UDR1 = DataByte;
     3ce:	80 93 ce 00 	sts	0x00CE, r24
     3d2:	1e c0       	rjmp	.+60     	; 0x410 <__vector_25+0x154>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3d4:	80 91 c8 00 	lds	r24, 0x00C8
     3d8:	85 ff       	sbrs	r24, 5
     3da:	fc cf       	rjmp	.-8      	; 0x3d4 <__vector_25+0x118>
				UDR1 = DataByte;
     3dc:	83 e3       	ldi	r24, 0x33	; 51
     3de:	80 93 ce 00 	sts	0x00CE, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3e2:	80 91 c8 00 	lds	r24, 0x00C8
     3e6:	85 ff       	sbrs	r24, 5
     3e8:	fc cf       	rjmp	.-8      	; 0x3e2 <__vector_25+0x126>
				UDR1 = DataByte;
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	80 93 ce 00 	sts	0x00CE, r24
      break;
    case BYTE_START:
      Serial_SendByte(BYTE_START);
      Serial_SendByte(BYTE_LEN_1_BYTE);
      Serial_SendByte(started);
     3f0:	80 91 06 02 	lds	r24, 0x0206
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     3f4:	90 91 c8 00 	lds	r25, 0x00C8
     3f8:	95 ff       	sbrs	r25, 5
     3fa:	fc cf       	rjmp	.-8      	; 0x3f4 <__vector_25+0x138>
				UDR1 = DataByte;
     3fc:	80 93 ce 00 	sts	0x00CE, r24
      started = 1;
     400:	81 e0       	ldi	r24, 0x01	; 1
     402:	80 93 06 02 	sts	0x0206, r24
     406:	04 c0       	rjmp	.+8      	; 0x410 <__vector_25+0x154>
    case BYTE_CONTROL_DATA:
      spoofReply = 1;
      spoofReplyLen = value_len;
      break;
    case BYTE_RESET:
      forceHardReset();
     408:	4c df       	rcall	.-360    	; 0x2a2 <forceHardReset>
      break;
    case BYTE_IN_REPORT:
      sendReport = 1;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 07 02 	sts	0x0207, r24
  {
    pdata[i++] = Serial_BlockingReceiveByte();
  }
  i = 0;
  handle_packet();
}
     410:	ff 91       	pop	r31
     412:	ef 91       	pop	r30
     414:	bf 91       	pop	r27
     416:	af 91       	pop	r26
     418:	9f 91       	pop	r25
     41a:	8f 91       	pop	r24
     41c:	7f 91       	pop	r23
     41e:	6f 91       	pop	r22
     420:	5f 91       	pop	r21
     422:	4f 91       	pop	r20
     424:	3f 91       	pop	r19
     426:	2f 91       	pop	r18
     428:	0f 90       	pop	r0
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	0f 90       	pop	r0
     42e:	1f 90       	pop	r1
     430:	18 95       	reti

00000432 <serial_init>:
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed);
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	90 93 cd 00 	sts	0x00CD, r25
     43a:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     43e:	86 e0       	ldi	r24, 0x06	; 6
     440:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     444:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     448:	e9 ec       	ldi	r30, 0xC9	; 201
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	88 e1       	ldi	r24, 0x18	; 24
     44e:	80 83       	st	Z, r24

				DDRD  |= (1 << 3);
     450:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     452:	5a 9a       	sbi	0x0b, 2	; 11

void serial_init(void)
{
  Serial_Init(USART_BAUDRATE, USART_DOUBLE_SPEED);

  UCSR1B |= (1 << RXCIE1); // Enable the USART Receive Complete interrupt (USART_RXC)
     454:	80 81       	ld	r24, Z
     456:	80 68       	ori	r24, 0x80	; 128
     458:	80 83       	st	Z, r24
     45a:	08 95       	ret

0000045c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
  /* Disable watchdog */
  MCUSR = 0;
     45c:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     45e:	0f b6       	in	r0, 0x3f	; 63
     460:	f8 94       	cli
     462:	a8 95       	wdr
     464:	80 91 60 00 	lds	r24, 0x0060
     468:	88 61       	ori	r24, 0x18	; 24
     46a:	80 93 60 00 	sts	0x0060, r24
     46e:	10 92 60 00 	sts	0x0060, r1
     472:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	80 e8       	ldi	r24, 0x80	; 128
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	80 93 61 00 	sts	0x0061, r24
     480:	90 93 61 00 	sts	0x0061, r25
     484:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

	/* Disable clock division */
	clock_prescale_set(clock_div_1);

  serial_init();
     486:	d5 df       	rcall	.-86     	; 0x432 <serial_init>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     488:	78 94       	sei

  GlobalInterruptEnable();

  LED_CONFIG;
     48a:	56 9a       	sbi	0x0a, 6	; 10

	/* Hardware Initialization */
	LEDs_Init();

  while(!started);
     48c:	80 91 06 02 	lds	r24, 0x0206
     490:	88 23       	and	r24, r24
     492:	e1 f3       	breq	.-8      	; 0x48c <SetupHardware+0x30>

  USB_Init();
     494:	a9 c3       	rjmp	.+1874   	; 0xbe8 <USB_Init>

00000496 <EVENT_USB_Device_Connect>:

/** Event handler for the USB_Connect event. This indicates that the device is enumerating via the status LEDs and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
     496:	08 95       	ret

00000498 <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs.
 */
void EVENT_USB_Device_Disconnect(void)
{
     498:	08 95       	ret

0000049a <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     49a:	42 e3       	ldi	r20, 0x32	; 50
     49c:	61 ec       	ldi	r22, 0xC1	; 193
     49e:	84 e0       	ldi	r24, 0x04	; 4
     4a0:	dd d2       	rcall	.+1466   	; 0xa5c <Endpoint_ConfigureEndpoint_Prv>
     4a2:	42 e3       	ldi	r20, 0x32	; 50
     4a4:	60 ec       	ldi	r22, 0xC0	; 192
     4a6:	83 e0       	ldi	r24, 0x03	; 3
     4a8:	d9 c2       	rjmp	.+1458   	; 0xa5c <Endpoint_ConfigureEndpoint_Prv>

000004aa <EVENT_USB_Device_ControlRequest>:
void EVENT_USB_Device_ControlRequest(void)
{
  static unsigned char buffer[MAX_CONTROL_TRANSFER_SIZE];

  /* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
     4aa:	40 91 12 02 	lds	r20, 0x0212
     4ae:	41 30       	cpi	r20, 0x01	; 1
     4b0:	21 f0       	breq	.+8      	; 0x4ba <EVENT_USB_Device_ControlRequest+0x10>
     4b2:	49 30       	cpi	r20, 0x09	; 9
     4b4:	09 f4       	brne	.+2      	; 0x4b8 <EVENT_USB_Device_ControlRequest+0xe>
     4b6:	5c c0       	rjmp	.+184    	; 0x570 <EVENT_USB_Device_ControlRequest+0xc6>
     4b8:	08 95       	ret
	{
		case REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     4ba:	80 91 11 02 	lds	r24, 0x0211
     4be:	81 3a       	cpi	r24, 0xA1	; 161
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <EVENT_USB_Device_ControlRequest+0x1a>
     4c2:	8f c0       	rjmp	.+286    	; 0x5e2 <EVENT_USB_Device_ControlRequest+0x138>
			{
			  uint8_t reportType = USB_ControlRequest.wValue >> 8;
     4c4:	20 91 13 02 	lds	r18, 0x0213
     4c8:	30 91 14 02 	lds	r19, 0x0214
			  uint8_t reportId = USB_ControlRequest.wValue & 0xff;

			  if(reportType == REPORT_TYPE_FEATURE)
     4cc:	33 30       	cpi	r19, 0x03	; 3
     4ce:	09 f0       	breq	.+2      	; 0x4d2 <EVENT_USB_Device_ControlRequest+0x28>
     4d0:	88 c0       	rjmp	.+272    	; 0x5e2 <EVENT_USB_Device_ControlRequest+0x138>
     4d2:	c9 01       	movw	r24, r18
     4d4:	99 27       	eor	r25, r25
			  {
          const void* feature = NULL;
          unsigned char len = 0;

          switch(reportId)
     4d6:	83 3f       	cpi	r24, 0xF3	; 243
     4d8:	91 05       	cpc	r25, r1
     4da:	5c f4       	brge	.+22     	; 0x4f2 <EVENT_USB_Device_ControlRequest+0x48>
     4dc:	81 3f       	cpi	r24, 0xF1	; 241
     4de:	91 05       	cpc	r25, r1
     4e0:	64 f4       	brge	.+24     	; 0x4fa <EVENT_USB_Device_ControlRequest+0x50>
     4e2:	03 97       	sbiw	r24, 0x03	; 3
     4e4:	e9 f4       	brne	.+58     	; 0x520 <EVENT_USB_Device_ControlRequest+0x76>
              Endpoint_ClearOUT();
              break;
            case 0x03:
              feature = buf03;
              len = sizeof(buf03);
              ready = 1;
     4e6:	40 93 0b 02 	sts	0x020B, r20
              Endpoint_Write_Control_Stream_LE(buf, spoofReplyLen);
              Endpoint_ClearOUT();
              break;
            case 0x03:
              feature = buf03;
              len = sizeof(buf03);
     4ea:	60 e3       	ldi	r22, 0x30	; 48
              Endpoint_ClearSETUP();
              Endpoint_Write_Control_Stream_LE(buf, spoofReplyLen);
              Endpoint_ClearOUT();
              break;
            case 0x03:
              feature = buf03;
     4ec:	80 ec       	ldi	r24, 0xC0	; 192
     4ee:	90 e0       	ldi	r25, 0x00	; 0
              len = sizeof(buf03);
              ready = 1;
              break;
     4f0:	2f c0       	rjmp	.+94     	; 0x550 <EVENT_USB_Device_ControlRequest+0xa6>
			  if(reportType == REPORT_TYPE_FEATURE)
			  {
          const void* feature = NULL;
          unsigned char len = 0;

          switch(reportId)
     4f2:	83 3f       	cpi	r24, 0xF3	; 243
     4f4:	91 05       	cpc	r25, r1
     4f6:	49 f1       	breq	.+82     	; 0x54a <EVENT_USB_Device_ControlRequest+0xa0>
     4f8:	13 c0       	rjmp	.+38     	; 0x520 <EVENT_USB_Device_ControlRequest+0x76>
          {
            case 0xf1:
            case 0xf2:
              spoofReply = 0;
     4fa:	10 92 03 02 	sts	0x0203, r1
              send_spoof_header();
     4fe:	b2 de       	rcall	.-668    	; 0x264 <send_spoof_header>
              while(!spoofReply);
     500:	80 91 03 02 	lds	r24, 0x0203
     504:	88 23       	and	r24, r24
     506:	e1 f3       	breq	.-8      	; 0x500 <EVENT_USB_Device_ControlRequest+0x56>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     508:	80 91 e8 00 	lds	r24, 0x00E8
     50c:	87 7f       	andi	r24, 0xF7	; 247
     50e:	80 93 e8 00 	sts	0x00E8, r24
              Endpoint_ClearSETUP();
              Endpoint_Write_Control_Stream_LE(buf, spoofReplyLen);
     512:	60 91 02 02 	lds	r22, 0x0202
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	82 ec       	ldi	r24, 0xC2	; 194
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	9a d1       	rcall	.+820    	; 0x852 <Endpoint_Write_Control_Stream_LE>
     51e:	22 c0       	rjmp	.+68     	; 0x564 <EVENT_USB_Device_ControlRequest+0xba>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     520:	80 91 c8 00 	lds	r24, 0x00C8
     524:	85 ff       	sbrs	r24, 5
     526:	fc cf       	rjmp	.-8      	; 0x520 <EVENT_USB_Device_ControlRequest+0x76>
				UDR1 = DataByte;
     528:	89 e9       	ldi	r24, 0x99	; 153
     52a:	80 93 ce 00 	sts	0x00CE, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     52e:	80 91 c8 00 	lds	r24, 0x00C8
     532:	85 ff       	sbrs	r24, 5
     534:	fc cf       	rjmp	.-8      	; 0x52e <EVENT_USB_Device_ControlRequest+0x84>
				UDR1 = DataByte;
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	80 93 ce 00 	sts	0x00CE, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     53c:	80 91 c8 00 	lds	r24, 0x00C8
     540:	85 ff       	sbrs	r24, 5
     542:	fc cf       	rjmp	.-8      	; 0x53c <EVENT_USB_Device_ControlRequest+0x92>
				UDR1 = DataByte;
     544:	20 93 ce 00 	sts	0x00CE, r18
     548:	08 95       	ret
              len = sizeof(buf03);
              ready = 1;
              break;
            case 0xf3:
              feature = buff3;
              len = sizeof(buff3);
     54a:	68 e0       	ldi	r22, 0x08	; 8
              feature = buf03;
              len = sizeof(buf03);
              ready = 1;
              break;
            case 0xf3:
              feature = buff3;
     54c:	80 ef       	ldi	r24, 0xF0	; 240
     54e:	90 e0       	ldi	r25, 0x00	; 0
              Serial_SendByte(BYTE_LEN_1_BYTE);
              Serial_SendByte(reportId);
              break;
          }

          if(feature)
     550:	00 97       	sbiw	r24, 0x00	; 0
     552:	09 f4       	brne	.+2      	; 0x556 <EVENT_USB_Device_ControlRequest+0xac>
     554:	46 c0       	rjmp	.+140    	; 0x5e2 <EVENT_USB_Device_ControlRequest+0x138>
     556:	20 91 e8 00 	lds	r18, 0x00E8
     55a:	27 7f       	andi	r18, 0xF7	; 247
     55c:	20 93 e8 00 	sts	0x00E8, r18
          {
            Endpoint_ClearSETUP();
            Endpoint_Write_Control_PStream_LE(feature, len);
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	1a d2       	rcall	.+1076   	; 0x998 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     564:	80 91 e8 00 	lds	r24, 0x00E8
     568:	8b 77       	andi	r24, 0x7B	; 123
     56a:	80 93 e8 00 	sts	0x00E8, r24
     56e:	08 95       	ret
			  }
			}

			break;
		case REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     570:	80 91 11 02 	lds	r24, 0x0211
     574:	81 32       	cpi	r24, 0x21	; 33
     576:	a9 f5       	brne	.+106    	; 0x5e2 <EVENT_USB_Device_ControlRequest+0x138>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     578:	80 91 e8 00 	lds	r24, 0x00E8
     57c:	87 7f       	andi	r24, 0xF7	; 247
     57e:	80 93 e8 00 	sts	0x00E8, r24
			{
        Endpoint_ClearSETUP();
        Endpoint_Read_Control_Stream_LE(buffer, USB_ControlRequest.wLength);
     582:	60 91 17 02 	lds	r22, 0x0217
     586:	70 91 18 02 	lds	r23, 0x0218
     58a:	82 e8       	ldi	r24, 0x82	; 130
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	c4 d1       	rcall	.+904    	; 0x918 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     590:	80 91 e8 00 	lds	r24, 0x00E8
     594:	8e 77       	andi	r24, 0x7E	; 126
     596:	80 93 e8 00 	sts	0x00E8, r24
        Endpoint_ClearIN();

        uint8_t reportType = USB_ControlRequest.wValue >> 8;
     59a:	80 91 13 02 	lds	r24, 0x0213
     59e:	90 91 14 02 	lds	r25, 0x0214
        uint8_t reportId = USB_ControlRequest.wValue & 0xff;

        if(reportType == REPORT_TYPE_FEATURE)
     5a2:	93 30       	cpi	r25, 0x03	; 3
     5a4:	f1 f4       	brne	.+60     	; 0x5e2 <EVENT_USB_Device_ControlRequest+0x138>
        {
          switch(reportId)
     5a6:	80 3f       	cpi	r24, 0xF0	; 240
     5a8:	41 f4       	brne	.+16     	; 0x5ba <EVENT_USB_Device_ControlRequest+0x110>
          {
            case 0xf0:
              send_spoof_header();
     5aa:	5c de       	rcall	.-840    	; 0x264 <send_spoof_header>
              Serial_SendData(buffer, USB_ControlRequest.wLength);
     5ac:	60 91 17 02 	lds	r22, 0x0217
     5b0:	70 91 18 02 	lds	r23, 0x0218
     5b4:	82 e8       	ldi	r24, 0x82	; 130
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	5d c5       	rjmp	.+2746   	; 0x1074 <Serial_SendData>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     5ba:	90 91 c8 00 	lds	r25, 0x00C8
     5be:	95 ff       	sbrs	r25, 5
     5c0:	fc cf       	rjmp	.-8      	; 0x5ba <EVENT_USB_Device_ControlRequest+0x110>
				UDR1 = DataByte;
     5c2:	99 e9       	ldi	r25, 0x99	; 153
     5c4:	90 93 ce 00 	sts	0x00CE, r25
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     5c8:	90 91 c8 00 	lds	r25, 0x00C8
     5cc:	95 ff       	sbrs	r25, 5
     5ce:	fc cf       	rjmp	.-8      	; 0x5c8 <EVENT_USB_Device_ControlRequest+0x11e>
				UDR1 = DataByte;
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	90 93 ce 00 	sts	0x00CE, r25
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     5d6:	90 91 c8 00 	lds	r25, 0x00C8
     5da:	95 ff       	sbrs	r25, 5
     5dc:	fc cf       	rjmp	.-8      	; 0x5d6 <EVENT_USB_Device_ControlRequest+0x12c>
				UDR1 = DataByte;
     5de:	80 93 ce 00 	sts	0x00CE, r24
     5e2:	08 95       	ret

000005e4 <SendNextReport>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5e4:	84 e0       	ldi	r24, 0x04	; 4
     5e6:	80 93 e9 00 	sts	0x00E9, r24
void SendNextReport(void)
{
	/* Select the IN Report Endpoint */
	Endpoint_SelectEndpoint(IN_EPNUM);

  if (ready && sendReport)
     5ea:	80 91 0b 02 	lds	r24, 0x020B
     5ee:	88 23       	and	r24, r24
     5f0:	b1 f0       	breq	.+44     	; 0x61e <SendNextReport+0x3a>
     5f2:	80 91 07 02 	lds	r24, 0x0207
     5f6:	88 23       	and	r24, r24
     5f8:	91 f0       	breq	.+36     	; 0x61e <SendNextReport+0x3a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5fa:	80 91 e8 00 	lds	r24, 0x00E8
  {
    /* Wait until the host is ready to accept another packet */
    while (!Endpoint_IsINReady()) {}
     5fe:	80 ff       	sbrs	r24, 0
     600:	fc cf       	rjmp	.-8      	; 0x5fa <SendNextReport+0x16>

		/* Write IN Report Data */
		Endpoint_Write_Stream_LE(report, sizeof(report), NULL);
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	60 e4       	ldi	r22, 0x40	; 64
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	82 e4       	ldi	r24, 0x42	; 66
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	8d d0       	rcall	.+282    	; 0x72a <Endpoint_Write_Stream_LE>

		sendReport = 0;
     610:	10 92 07 02 	sts	0x0207, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     614:	80 91 e8 00 	lds	r24, 0x00E8
     618:	8e 77       	andi	r24, 0x7E	; 126
     61a:	80 93 e8 00 	sts	0x00E8, r24
     61e:	08 95       	ret

00000620 <ReceiveNextReport>:
	}
}

/** Reads the next OUT report from the host from the OUT endpoint, if one has been sent. */
void ReceiveNextReport(void)
{
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	00 d0       	rcall	.+0      	; 0x626 <ReceiveNextReport+0x6>
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
      unsigned char length;
    } header;
    unsigned char buffer[EPSIZE];
  } packet = { .header.type = BYTE_OUT_REPORT };

  uint16_t length = 0;
     62a:	1a 82       	std	Y+2, r1	; 0x02
     62c:	19 82       	std	Y+1, r1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     634:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the OUT Report Endpoint */
	Endpoint_SelectEndpoint(OUT_EPNUM);

	/* Check if OUT Endpoint contains a packet */
	if (Endpoint_IsOUTReceived())
     638:	82 ff       	sbrs	r24, 2
     63a:	24 c0       	rjmp	.+72     	; 0x684 <ReceiveNextReport+0x64>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     63c:	80 91 e8 00 	lds	r24, 0x00E8
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
     640:	85 ff       	sbrs	r24, 5
     642:	0e c0       	rjmp	.+28     	; 0x660 <ReceiveNextReport+0x40>
		{
		  /* Read OUT Report Data */
		  uint8_t ErrorCode = Endpoint_Read_Stream_LE(packet.buffer, sizeof(packet.buffer), &length);
     644:	ae 01       	movw	r20, r28
     646:	4f 5f       	subi	r20, 0xFF	; 255
     648:	5f 4f       	sbci	r21, 0xFF	; 255
     64a:	60 e4       	ldi	r22, 0x40	; 64
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	82 e0       	ldi	r24, 0x02	; 2
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	b5 d0       	rcall	.+362    	; 0x7be <Endpoint_Read_Stream_LE>
		  if(ErrorCode == ENDPOINT_RWSTREAM_NoError)
     654:	81 11       	cpse	r24, r1
     656:	04 c0       	rjmp	.+8      	; 0x660 <ReceiveNextReport+0x40>
		  {
		    length = sizeof(packet.buffer);
     658:	80 e4       	ldi	r24, 0x40	; 64
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	9a 83       	std	Y+2, r25	; 0x02
     65e:	89 83       	std	Y+1, r24	; 0x01
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     660:	80 91 e8 00 	lds	r24, 0x00E8
     664:	8b 77       	andi	r24, 0x7B	; 123
     666:	80 93 e8 00 	sts	0x00E8, r24
		}

		/* Handshake the OUT Endpoint - clear endpoint and ready for next report */
		Endpoint_ClearOUT();

		if(length)
     66a:	69 81       	ldd	r22, Y+1	; 0x01
     66c:	7a 81       	ldd	r23, Y+2	; 0x02
     66e:	61 15       	cp	r22, r1
     670:	71 05       	cpc	r23, r1
     672:	41 f0       	breq	.+16     	; 0x684 <ReceiveNextReport+0x64>
		{
		  packet.header.length = length & 0xFF;
     674:	60 93 01 01 	sts	0x0101, r22
      Serial_SendData(&packet, sizeof(packet.header) + packet.header.length);
     678:	77 27       	eor	r23, r23
     67a:	6e 5f       	subi	r22, 0xFE	; 254
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	80 e0       	ldi	r24, 0x00	; 0
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	f8 d4       	rcall	.+2544   	; 0x1074 <Serial_SendData>
		}
	}
}
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	08 95       	ret

0000068e <HID_Task>:

/** Function to manage HID report generation and transmission to the host, when in report mode. */
void HID_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     68e:	80 91 10 02 	lds	r24, 0x0210
     692:	84 30       	cpi	r24, 0x04	; 4
     694:	11 f4       	brne	.+4      	; 0x69a <HID_Task+0xc>
	  return;

	/* Send the next keypress report to the host */
	SendNextReport();
     696:	a6 df       	rcall	.-180    	; 0x5e4 <SendNextReport>

	/* Process the LED report sent from the host */
	ReceiveNextReport();
     698:	c3 cf       	rjmp	.-122    	; 0x620 <ReceiveNextReport>
     69a:	08 95       	ret

0000069c <main>:
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
  SetupHardware();
     69c:	df de       	rcall	.-578    	; 0x45c <SetupHardware>

  for (;;)
  {
    HID_Task();
     69e:	f7 df       	rcall	.-18     	; 0x68e <HID_Task>
    USB_USBTask();
     6a0:	cf d4       	rcall	.+2462   	; 0x1040 <USB_USBTask>
  }
     6a2:	fd cf       	rjmp	.-6      	; 0x69e <main+0x2>

000006a4 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     6a4:	29 2f       	mov	r18, r25
     6a6:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     6a8:	23 30       	cpi	r18, 0x03	; 3
     6aa:	31 05       	cpc	r19, r1
     6ac:	e1 f0       	breq	.+56     	; 0x6e6 <CALLBACK_USB_GetDescriptor+0x42>
     6ae:	5c f4       	brge	.+22     	; 0x6c6 <CALLBACK_USB_GetDescriptor+0x22>
     6b0:	21 30       	cpi	r18, 0x01	; 1
     6b2:	31 05       	cpc	r19, r1
     6b4:	99 f0       	breq	.+38     	; 0x6dc <CALLBACK_USB_GetDescriptor+0x38>
     6b6:	22 30       	cpi	r18, 0x02	; 2
     6b8:	31 05       	cpc	r19, r1
     6ba:	79 f5       	brne	.+94     	; 0x71a <CALLBACK_USB_GetDescriptor+0x76>
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     6bc:	89 e2       	ldi	r24, 0x29	; 41
     6be:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
     6c0:	20 e5       	ldi	r18, 0x50	; 80
     6c2:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     6c4:	2e c0       	rjmp	.+92     	; 0x722 <CALLBACK_USB_GetDescriptor+0x7e>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     6c6:	21 32       	cpi	r18, 0x21	; 33
     6c8:	31 05       	cpc	r19, r1
     6ca:	11 f1       	breq	.+68     	; 0x710 <CALLBACK_USB_GetDescriptor+0x6c>
     6cc:	22 32       	cpi	r18, 0x22	; 34
     6ce:	31 05       	cpc	r19, r1
     6d0:	21 f5       	brne	.+72     	; 0x71a <CALLBACK_USB_GetDescriptor+0x76>
			Address = (void*)&ConfigurationDescriptor.HID;
			Size    = sizeof(USB_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = (void*)&Report;
			Size    = sizeof(Report);
     6d2:	80 ea       	ldi	r24, 0xA0	; 160
     6d4:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID:
			Address = (void*)&ConfigurationDescriptor.HID;
			Size    = sizeof(USB_Descriptor_HID_t);
			break;
		case DTYPE_Report:
			Address = (void*)&Report;
     6d6:	2b e8       	ldi	r18, 0x8B	; 139
     6d8:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(Report);
			break;
     6da:	23 c0       	rjmp	.+70     	; 0x722 <CALLBACK_USB_GetDescriptor+0x7e>

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     6dc:	82 e1       	ldi	r24, 0x12	; 18
     6de:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
     6e0:	29 e7       	ldi	r18, 0x79	; 121
     6e2:	31 e0       	ldi	r19, 0x01	; 1
     6e4:	1e c0       	rjmp	.+60     	; 0x722 <CALLBACK_USB_GetDescriptor+0x7e>
     6e6:	99 27       	eor	r25, r25
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
     6e8:	81 30       	cpi	r24, 0x01	; 1
     6ea:	91 05       	cpc	r25, r1
     6ec:	41 f0       	breq	.+16     	; 0x6fe <CALLBACK_USB_GetDescriptor+0x5a>
     6ee:	82 30       	cpi	r24, 0x02	; 2
     6f0:	91 05       	cpc	r25, r1
     6f2:	41 f0       	breq	.+16     	; 0x704 <CALLBACK_USB_GetDescriptor+0x60>
     6f4:	89 2b       	or	r24, r25
     6f6:	89 f4       	brne	.+34     	; 0x71a <CALLBACK_USB_GetDescriptor+0x76>
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     6f8:	ec e4       	ldi	r30, 0x4C	; 76
     6fa:	f1 e0       	ldi	r31, 0x01	; 1
     6fc:	05 c0       	rjmp	.+10     	; 0x708 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     6fe:	e8 e3       	ldi	r30, 0x38	; 56
     700:	f1 e0       	ldi	r31, 0x01	; 1
     702:	02 c0       	rjmp	.+4      	; 0x708 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     704:	e8 ef       	ldi	r30, 0xF8	; 248
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	84 91       	lpm	r24, Z
     70a:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
     70c:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
     70e:	09 c0       	rjmp	.+18     	; 0x722 <CALLBACK_USB_GetDescriptor+0x7e>
			}
			break;
		case DTYPE_HID:
			Address = (void*)&ConfigurationDescriptor.HID;
			Size    = sizeof(USB_Descriptor_HID_t);
     710:	89 e0       	ldi	r24, 0x09	; 9
     712:	90 e0       	ldi	r25, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
			}
			break;
		case DTYPE_HID:
			Address = (void*)&ConfigurationDescriptor.HID;
     714:	22 e6       	ldi	r18, 0x62	; 98
     716:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_HID_t);
			break;
     718:	04 c0       	rjmp	.+8      	; 0x722 <CALLBACK_USB_GetDescriptor+0x7e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
     71e:	20 e0       	ldi	r18, 0x00	; 0
     720:	30 e0       	ldi	r19, 0x00	; 0
			Address = (void*)&Report;
			Size    = sizeof(Report);
			break;
	}
	
	*DescriptorAddress = Address;
     722:	fa 01       	movw	r30, r20
     724:	31 83       	std	Z+1, r19	; 0x01
     726:	20 83       	st	Z, r18
	return Size;
}
     728:	08 95       	ret

0000072a <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     72a:	cf 92       	push	r12
     72c:	df 92       	push	r13
     72e:	ef 92       	push	r14
     730:	ff 92       	push	r15
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	ec 01       	movw	r28, r24
     73c:	8b 01       	movw	r16, r22
     73e:	7a 01       	movw	r14, r20
     740:	e1 d1       	rcall	.+962    	; 0xb04 <Endpoint_WaitUntilReady>
     742:	81 11       	cpse	r24, r1
     744:	33 c0       	rjmp	.+102    	; 0x7ac <Endpoint_Write_Stream_LE+0x82>
     746:	e1 14       	cp	r14, r1
     748:	f1 04       	cpc	r15, r1
     74a:	39 f0       	breq	.+14     	; 0x75a <Endpoint_Write_Stream_LE+0x30>
     74c:	f7 01       	movw	r30, r14
     74e:	80 81       	ld	r24, Z
     750:	91 81       	ldd	r25, Z+1	; 0x01
     752:	08 1b       	sub	r16, r24
     754:	19 0b       	sbc	r17, r25
     756:	c8 0f       	add	r28, r24
     758:	d9 1f       	adc	r29, r25
     75a:	c1 2c       	mov	r12, r1
     75c:	d1 2c       	mov	r13, r1
     75e:	01 15       	cp	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	19 f1       	breq	.+70     	; 0x7aa <Endpoint_Write_Stream_LE+0x80>
     764:	80 91 e8 00 	lds	r24, 0x00E8
     768:	85 fd       	sbrc	r24, 5
     76a:	16 c0       	rjmp	.+44     	; 0x798 <Endpoint_Write_Stream_LE+0x6e>
     76c:	80 91 e8 00 	lds	r24, 0x00E8
     770:	8e 77       	andi	r24, 0x7E	; 126
     772:	80 93 e8 00 	sts	0x00E8, r24
     776:	64 d4       	rcall	.+2248   	; 0x1040 <USB_USBTask>
     778:	e1 14       	cp	r14, r1
     77a:	f1 04       	cpc	r15, r1
     77c:	49 f0       	breq	.+18     	; 0x790 <Endpoint_Write_Stream_LE+0x66>
     77e:	f7 01       	movw	r30, r14
     780:	80 81       	ld	r24, Z
     782:	91 81       	ldd	r25, Z+1	; 0x01
     784:	c8 0e       	add	r12, r24
     786:	d9 1e       	adc	r13, r25
     788:	d1 82       	std	Z+1, r13	; 0x01
     78a:	c0 82       	st	Z, r12
     78c:	85 e0       	ldi	r24, 0x05	; 5
     78e:	0e c0       	rjmp	.+28     	; 0x7ac <Endpoint_Write_Stream_LE+0x82>
     790:	b9 d1       	rcall	.+882    	; 0xb04 <Endpoint_WaitUntilReady>
     792:	88 23       	and	r24, r24
     794:	21 f3       	breq	.-56     	; 0x75e <Endpoint_Write_Stream_LE+0x34>
     796:	0a c0       	rjmp	.+20     	; 0x7ac <Endpoint_Write_Stream_LE+0x82>
     798:	89 91       	ld	r24, Y+
     79a:	80 93 f1 00 	sts	0x00F1, r24
     79e:	01 50       	subi	r16, 0x01	; 1
     7a0:	11 09       	sbc	r17, r1
     7a2:	ff ef       	ldi	r31, 0xFF	; 255
     7a4:	cf 1a       	sub	r12, r31
     7a6:	df 0a       	sbc	r13, r31
     7a8:	da cf       	rjmp	.-76     	; 0x75e <Endpoint_Write_Stream_LE+0x34>
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	df 91       	pop	r29
     7ae:	cf 91       	pop	r28
     7b0:	1f 91       	pop	r17
     7b2:	0f 91       	pop	r16
     7b4:	ff 90       	pop	r15
     7b6:	ef 90       	pop	r14
     7b8:	df 90       	pop	r13
     7ba:	cf 90       	pop	r12
     7bc:	08 95       	ret

000007be <Endpoint_Read_Stream_LE>:
     7be:	cf 92       	push	r12
     7c0:	df 92       	push	r13
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	0f 93       	push	r16
     7c8:	1f 93       	push	r17
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	ec 01       	movw	r28, r24
     7d0:	8b 01       	movw	r16, r22
     7d2:	7a 01       	movw	r14, r20
     7d4:	97 d1       	rcall	.+814    	; 0xb04 <Endpoint_WaitUntilReady>
     7d6:	81 11       	cpse	r24, r1
     7d8:	33 c0       	rjmp	.+102    	; 0x840 <Endpoint_Read_Stream_LE+0x82>
     7da:	e1 14       	cp	r14, r1
     7dc:	f1 04       	cpc	r15, r1
     7de:	39 f0       	breq	.+14     	; 0x7ee <Endpoint_Read_Stream_LE+0x30>
     7e0:	f7 01       	movw	r30, r14
     7e2:	80 81       	ld	r24, Z
     7e4:	91 81       	ldd	r25, Z+1	; 0x01
     7e6:	08 1b       	sub	r16, r24
     7e8:	19 0b       	sbc	r17, r25
     7ea:	c8 0f       	add	r28, r24
     7ec:	d9 1f       	adc	r29, r25
     7ee:	c1 2c       	mov	r12, r1
     7f0:	d1 2c       	mov	r13, r1
     7f2:	01 15       	cp	r16, r1
     7f4:	11 05       	cpc	r17, r1
     7f6:	19 f1       	breq	.+70     	; 0x83e <Endpoint_Read_Stream_LE+0x80>
     7f8:	80 91 e8 00 	lds	r24, 0x00E8
     7fc:	85 fd       	sbrc	r24, 5
     7fe:	16 c0       	rjmp	.+44     	; 0x82c <Endpoint_Read_Stream_LE+0x6e>
     800:	80 91 e8 00 	lds	r24, 0x00E8
     804:	8b 77       	andi	r24, 0x7B	; 123
     806:	80 93 e8 00 	sts	0x00E8, r24
     80a:	1a d4       	rcall	.+2100   	; 0x1040 <USB_USBTask>
     80c:	e1 14       	cp	r14, r1
     80e:	f1 04       	cpc	r15, r1
     810:	49 f0       	breq	.+18     	; 0x824 <Endpoint_Read_Stream_LE+0x66>
     812:	f7 01       	movw	r30, r14
     814:	80 81       	ld	r24, Z
     816:	91 81       	ldd	r25, Z+1	; 0x01
     818:	c8 0e       	add	r12, r24
     81a:	d9 1e       	adc	r13, r25
     81c:	d1 82       	std	Z+1, r13	; 0x01
     81e:	c0 82       	st	Z, r12
     820:	85 e0       	ldi	r24, 0x05	; 5
     822:	0e c0       	rjmp	.+28     	; 0x840 <Endpoint_Read_Stream_LE+0x82>
     824:	6f d1       	rcall	.+734    	; 0xb04 <Endpoint_WaitUntilReady>
     826:	88 23       	and	r24, r24
     828:	21 f3       	breq	.-56     	; 0x7f2 <Endpoint_Read_Stream_LE+0x34>
     82a:	0a c0       	rjmp	.+20     	; 0x840 <Endpoint_Read_Stream_LE+0x82>
     82c:	80 91 f1 00 	lds	r24, 0x00F1
     830:	89 93       	st	Y+, r24
     832:	01 50       	subi	r16, 0x01	; 1
     834:	11 09       	sbc	r17, r1
     836:	ff ef       	ldi	r31, 0xFF	; 255
     838:	cf 1a       	sub	r12, r31
     83a:	df 0a       	sbc	r13, r31
     83c:	da cf       	rjmp	.-76     	; 0x7f2 <Endpoint_Read_Stream_LE+0x34>
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	df 90       	pop	r13
     84e:	cf 90       	pop	r12
     850:	08 95       	ret

00000852 <Endpoint_Write_Control_Stream_LE>:
     852:	20 91 17 02 	lds	r18, 0x0217
     856:	30 91 18 02 	lds	r19, 0x0218
     85a:	26 17       	cp	r18, r22
     85c:	37 07       	cpc	r19, r23
     85e:	48 f0       	brcs	.+18     	; 0x872 <Endpoint_Write_Control_Stream_LE+0x20>
     860:	61 15       	cp	r22, r1
     862:	71 05       	cpc	r23, r1
     864:	39 f4       	brne	.+14     	; 0x874 <Endpoint_Write_Control_Stream_LE+0x22>
     866:	20 91 e8 00 	lds	r18, 0x00E8
     86a:	2e 77       	andi	r18, 0x7E	; 126
     86c:	20 93 e8 00 	sts	0x00E8, r18
     870:	01 c0       	rjmp	.+2      	; 0x874 <Endpoint_Write_Control_Stream_LE+0x22>
     872:	b9 01       	movw	r22, r18
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	61 15       	cp	r22, r1
     878:	71 05       	cpc	r23, r1
     87a:	a9 f1       	breq	.+106    	; 0x8e6 <Endpoint_Write_Control_Stream_LE+0x94>
     87c:	20 91 10 02 	lds	r18, 0x0210
     880:	22 23       	and	r18, r18
     882:	09 f4       	brne	.+2      	; 0x886 <Endpoint_Write_Control_Stream_LE+0x34>
     884:	43 c0       	rjmp	.+134    	; 0x90c <Endpoint_Write_Control_Stream_LE+0xba>
     886:	25 30       	cpi	r18, 0x05	; 5
     888:	09 f4       	brne	.+2      	; 0x88c <Endpoint_Write_Control_Stream_LE+0x3a>
     88a:	42 c0       	rjmp	.+132    	; 0x910 <Endpoint_Write_Control_Stream_LE+0xbe>
     88c:	20 91 e8 00 	lds	r18, 0x00E8
     890:	23 fd       	sbrc	r18, 3
     892:	40 c0       	rjmp	.+128    	; 0x914 <Endpoint_Write_Control_Stream_LE+0xc2>
     894:	20 91 e8 00 	lds	r18, 0x00E8
     898:	22 fd       	sbrc	r18, 2
     89a:	32 c0       	rjmp	.+100    	; 0x900 <Endpoint_Write_Control_Stream_LE+0xae>
     89c:	20 91 e8 00 	lds	r18, 0x00E8
     8a0:	20 ff       	sbrs	r18, 0
     8a2:	e9 cf       	rjmp	.-46     	; 0x876 <Endpoint_Write_Control_Stream_LE+0x24>
     8a4:	40 91 f3 00 	lds	r20, 0x00F3
     8a8:	20 91 f2 00 	lds	r18, 0x00F2
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	34 2b       	or	r19, r20
     8b0:	fc 01       	movw	r30, r24
     8b2:	cf 01       	movw	r24, r30
     8b4:	61 15       	cp	r22, r1
     8b6:	71 05       	cpc	r23, r1
     8b8:	59 f0       	breq	.+22     	; 0x8d0 <Endpoint_Write_Control_Stream_LE+0x7e>
     8ba:	20 34       	cpi	r18, 0x40	; 64
     8bc:	31 05       	cpc	r19, r1
     8be:	40 f4       	brcc	.+16     	; 0x8d0 <Endpoint_Write_Control_Stream_LE+0x7e>
     8c0:	81 91       	ld	r24, Z+
     8c2:	80 93 f1 00 	sts	0x00F1, r24
     8c6:	61 50       	subi	r22, 0x01	; 1
     8c8:	71 09       	sbc	r23, r1
     8ca:	2f 5f       	subi	r18, 0xFF	; 255
     8cc:	3f 4f       	sbci	r19, 0xFF	; 255
     8ce:	f1 cf       	rjmp	.-30     	; 0x8b2 <Endpoint_Write_Control_Stream_LE+0x60>
     8d0:	41 e0       	ldi	r20, 0x01	; 1
     8d2:	20 34       	cpi	r18, 0x40	; 64
     8d4:	31 05       	cpc	r19, r1
     8d6:	09 f0       	breq	.+2      	; 0x8da <Endpoint_Write_Control_Stream_LE+0x88>
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	20 91 e8 00 	lds	r18, 0x00E8
     8de:	2e 77       	andi	r18, 0x7E	; 126
     8e0:	20 93 e8 00 	sts	0x00E8, r18
     8e4:	c8 cf       	rjmp	.-112    	; 0x876 <Endpoint_Write_Control_Stream_LE+0x24>
     8e6:	41 11       	cpse	r20, r1
     8e8:	c9 cf       	rjmp	.-110    	; 0x87c <Endpoint_Write_Control_Stream_LE+0x2a>
     8ea:	0a c0       	rjmp	.+20     	; 0x900 <Endpoint_Write_Control_Stream_LE+0xae>
     8ec:	80 91 10 02 	lds	r24, 0x0210
     8f0:	88 23       	and	r24, r24
     8f2:	61 f0       	breq	.+24     	; 0x90c <Endpoint_Write_Control_Stream_LE+0xba>
     8f4:	85 30       	cpi	r24, 0x05	; 5
     8f6:	61 f0       	breq	.+24     	; 0x910 <Endpoint_Write_Control_Stream_LE+0xbe>
     8f8:	80 91 e8 00 	lds	r24, 0x00E8
     8fc:	83 fd       	sbrc	r24, 3
     8fe:	0a c0       	rjmp	.+20     	; 0x914 <Endpoint_Write_Control_Stream_LE+0xc2>
     900:	80 91 e8 00 	lds	r24, 0x00E8
     904:	82 ff       	sbrs	r24, 2
     906:	f2 cf       	rjmp	.-28     	; 0x8ec <Endpoint_Write_Control_Stream_LE+0x9a>
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	08 95       	ret
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	08 95       	ret
     910:	83 e0       	ldi	r24, 0x03	; 3
     912:	08 95       	ret
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	08 95       	ret

00000918 <Endpoint_Read_Control_Stream_LE>:
     918:	61 15       	cp	r22, r1
     91a:	71 05       	cpc	r23, r1
     91c:	29 f4       	brne	.+10     	; 0x928 <Endpoint_Read_Control_Stream_LE+0x10>
     91e:	20 91 e8 00 	lds	r18, 0x00E8
     922:	2b 77       	andi	r18, 0x7B	; 123
     924:	20 93 e8 00 	sts	0x00E8, r18
     928:	fc 01       	movw	r30, r24
     92a:	61 15       	cp	r22, r1
     92c:	71 05       	cpc	r23, r1
     92e:	41 f1       	breq	.+80     	; 0x980 <Endpoint_Read_Control_Stream_LE+0x68>
     930:	80 91 10 02 	lds	r24, 0x0210
     934:	88 23       	and	r24, r24
     936:	61 f1       	breq	.+88     	; 0x990 <Endpoint_Read_Control_Stream_LE+0x78>
     938:	85 30       	cpi	r24, 0x05	; 5
     93a:	61 f1       	breq	.+88     	; 0x994 <Endpoint_Read_Control_Stream_LE+0x7c>
     93c:	80 91 e8 00 	lds	r24, 0x00E8
     940:	83 fd       	sbrc	r24, 3
     942:	24 c0       	rjmp	.+72     	; 0x98c <Endpoint_Read_Control_Stream_LE+0x74>
     944:	80 91 e8 00 	lds	r24, 0x00E8
     948:	82 ff       	sbrs	r24, 2
     94a:	ef cf       	rjmp	.-34     	; 0x92a <Endpoint_Read_Control_Stream_LE+0x12>
     94c:	20 91 f3 00 	lds	r18, 0x00F3
     950:	80 91 f2 00 	lds	r24, 0x00F2
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	92 2b       	or	r25, r18
     958:	89 2b       	or	r24, r25
     95a:	31 f0       	breq	.+12     	; 0x968 <Endpoint_Read_Control_Stream_LE+0x50>
     95c:	80 91 f1 00 	lds	r24, 0x00F1
     960:	81 93       	st	Z+, r24
     962:	61 50       	subi	r22, 0x01	; 1
     964:	71 09       	sbc	r23, r1
     966:	91 f7       	brne	.-28     	; 0x94c <Endpoint_Read_Control_Stream_LE+0x34>
     968:	80 91 e8 00 	lds	r24, 0x00E8
     96c:	8b 77       	andi	r24, 0x7B	; 123
     96e:	80 93 e8 00 	sts	0x00E8, r24
     972:	db cf       	rjmp	.-74     	; 0x92a <Endpoint_Read_Control_Stream_LE+0x12>
     974:	80 91 10 02 	lds	r24, 0x0210
     978:	88 23       	and	r24, r24
     97a:	51 f0       	breq	.+20     	; 0x990 <Endpoint_Read_Control_Stream_LE+0x78>
     97c:	85 30       	cpi	r24, 0x05	; 5
     97e:	51 f0       	breq	.+20     	; 0x994 <Endpoint_Read_Control_Stream_LE+0x7c>
     980:	80 91 e8 00 	lds	r24, 0x00E8
     984:	80 ff       	sbrs	r24, 0
     986:	f6 cf       	rjmp	.-20     	; 0x974 <Endpoint_Read_Control_Stream_LE+0x5c>
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	08 95       	ret
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	08 95       	ret
     990:	82 e0       	ldi	r24, 0x02	; 2
     992:	08 95       	ret
     994:	83 e0       	ldi	r24, 0x03	; 3
     996:	08 95       	ret

00000998 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     998:	20 91 17 02 	lds	r18, 0x0217
     99c:	30 91 18 02 	lds	r19, 0x0218
     9a0:	26 17       	cp	r18, r22
     9a2:	37 07       	cpc	r19, r23
     9a4:	48 f0       	brcs	.+18     	; 0x9b8 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     9a6:	61 15       	cp	r22, r1
     9a8:	71 05       	cpc	r23, r1
     9aa:	39 f4       	brne	.+14     	; 0x9ba <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9ac:	20 91 e8 00 	lds	r18, 0x00E8
     9b0:	2e 77       	andi	r18, 0x7E	; 126
     9b2:	20 93 e8 00 	sts	0x00E8, r18
     9b6:	01 c0       	rjmp	.+2      	; 0x9ba <Endpoint_Write_Control_PStream_LE+0x22>
     9b8:	b9 01       	movw	r22, r18
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     9be:	61 15       	cp	r22, r1
     9c0:	71 05       	cpc	r23, r1
     9c2:	99 f1       	breq	.+102    	; 0xa2a <Endpoint_Write_Control_PStream_LE+0x92>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9c4:	80 91 10 02 	lds	r24, 0x0210

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9c8:	88 23       	and	r24, r24
     9ca:	09 f4       	brne	.+2      	; 0x9ce <Endpoint_Write_Control_PStream_LE+0x36>
     9cc:	41 c0       	rjmp	.+130    	; 0xa50 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9ce:	85 30       	cpi	r24, 0x05	; 5
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <Endpoint_Write_Control_PStream_LE+0x3c>
     9d2:	40 c0       	rjmp	.+128    	; 0xa54 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9d4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     9d8:	83 fd       	sbrc	r24, 3
     9da:	3e c0       	rjmp	.+124    	; 0xa58 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9dc:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     9e0:	82 fd       	sbrc	r24, 2
     9e2:	30 c0       	rjmp	.+96     	; 0xa44 <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9e4:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     9e8:	80 ff       	sbrs	r24, 0
     9ea:	e9 cf       	rjmp	.-46     	; 0x9be <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     9ec:	20 91 f3 00 	lds	r18, 0x00F3
     9f0:	80 91 f2 00 	lds	r24, 0x00F2
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	92 2b       	or	r25, r18
		{
		  uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9f8:	61 15       	cp	r22, r1
     9fa:	71 05       	cpc	r23, r1
     9fc:	59 f0       	breq	.+22     	; 0xa14 <Endpoint_Write_Control_PStream_LE+0x7c>
     9fe:	80 34       	cpi	r24, 0x40	; 64
     a00:	91 05       	cpc	r25, r1
     a02:	40 f4       	brcc	.+16     	; 0xa14 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     a04:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a06:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     a0a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     a0c:	61 50       	subi	r22, 0x01	; 1
     a0e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     a10:	01 96       	adiw	r24, 0x01	; 1
     a12:	f2 cf       	rjmp	.-28     	; 0x9f8 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     a14:	21 e0       	ldi	r18, 0x01	; 1
     a16:	80 34       	cpi	r24, 0x40	; 64
     a18:	91 05       	cpc	r25, r1
     a1a:	09 f0       	breq	.+2      	; 0xa1e <Endpoint_Write_Control_PStream_LE+0x86>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a1e:	80 91 e8 00 	lds	r24, 0x00E8
     a22:	8e 77       	andi	r24, 0x7E	; 126
     a24:	80 93 e8 00 	sts	0x00E8, r24
     a28:	ca cf       	rjmp	.-108    	; 0x9be <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     a2a:	21 11       	cpse	r18, r1
     a2c:	cb cf       	rjmp	.-106    	; 0x9c4 <Endpoint_Write_Control_PStream_LE+0x2c>
     a2e:	0a c0       	rjmp	.+20     	; 0xa44 <Endpoint_Write_Control_PStream_LE+0xac>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
	  uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a30:	80 91 10 02 	lds	r24, 0x0210

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a34:	88 23       	and	r24, r24
     a36:	61 f0       	breq	.+24     	; 0xa50 <Endpoint_Write_Control_PStream_LE+0xb8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a38:	85 30       	cpi	r24, 0x05	; 5
     a3a:	61 f0       	breq	.+24     	; 0xa54 <Endpoint_Write_Control_PStream_LE+0xbc>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a3c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a40:	83 fd       	sbrc	r24, 3
     a42:	0a c0       	rjmp	.+20     	; 0xa58 <Endpoint_Write_Control_PStream_LE+0xc0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a44:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     a48:	82 ff       	sbrs	r24, 2
     a4a:	f2 cf       	rjmp	.-28     	; 0xa30 <Endpoint_Write_Control_PStream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a54:	83 e0       	ldi	r24, 0x03	; 3
     a56:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a58:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a5a:	08 95       	ret

00000a5c <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     a5c:	98 2f       	mov	r25, r24
     a5e:	97 30       	cpi	r25, 0x07	; 7
     a60:	58 f5       	brcc	.+86     	; 0xab8 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     a62:	90 93 e9 00 	sts	0x00E9, r25
     a66:	98 17       	cp	r25, r24
     a68:	39 f0       	breq	.+14     	; 0xa78 <Endpoint_ConfigureEndpoint_Prv+0x1c>
     a6a:	70 91 ec 00 	lds	r23, 0x00EC
     a6e:	20 91 ed 00 	lds	r18, 0x00ED
     a72:	50 91 f0 00 	lds	r21, 0x00F0
     a76:	03 c0       	rjmp	.+6      	; 0xa7e <Endpoint_ConfigureEndpoint_Prv+0x22>
     a78:	24 2f       	mov	r18, r20
     a7a:	76 2f       	mov	r23, r22
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	21 ff       	sbrs	r18, 1
     a80:	19 c0       	rjmp	.+50     	; 0xab4 <Endpoint_ConfigureEndpoint_Prv+0x58>
     a82:	30 91 eb 00 	lds	r19, 0x00EB
     a86:	3e 7f       	andi	r19, 0xFE	; 254
     a88:	30 93 eb 00 	sts	0x00EB, r19
     a8c:	30 91 ed 00 	lds	r19, 0x00ED
     a90:	3d 7f       	andi	r19, 0xFD	; 253
     a92:	30 93 ed 00 	sts	0x00ED, r19
     a96:	30 91 eb 00 	lds	r19, 0x00EB
     a9a:	31 60       	ori	r19, 0x01	; 1
     a9c:	30 93 eb 00 	sts	0x00EB, r19
     aa0:	70 93 ec 00 	sts	0x00EC, r23
     aa4:	20 93 ed 00 	sts	0x00ED, r18
     aa8:	50 93 f0 00 	sts	0x00F0, r21
     aac:	20 91 ee 00 	lds	r18, 0x00EE
     ab0:	27 ff       	sbrs	r18, 7
     ab2:	07 c0       	rjmp	.+14     	; 0xac2 <Endpoint_ConfigureEndpoint_Prv+0x66>
     ab4:	9f 5f       	subi	r25, 0xFF	; 255
     ab6:	d3 cf       	rjmp	.-90     	; 0xa5e <Endpoint_ConfigureEndpoint_Prv+0x2>
     ab8:	8f 70       	andi	r24, 0x0F	; 15
     aba:	80 93 e9 00 	sts	0x00E9, r24
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	08 95       	ret
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	08 95       	ret

00000ac6 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     ac6:	80 91 11 02 	lds	r24, 0x0211
     aca:	87 ff       	sbrs	r24, 7
     acc:	11 c0       	rjmp	.+34     	; 0xaf0 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ace:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
     ad2:	82 fd       	sbrc	r24, 2
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ad6:	80 91 10 02 	lds	r24, 0x0210
     ada:	81 11       	cpse	r24, r1
     adc:	f8 cf       	rjmp	.-16     	; 0xace <Endpoint_ClearStatusStage+0x8>
     ade:	11 c0       	rjmp	.+34     	; 0xb02 <__stack+0x3>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ae0:	80 91 e8 00 	lds	r24, 0x00E8
     ae4:	8b 77       	andi	r24, 0x7B	; 123
     ae6:	0b c0       	rjmp	.+22     	; 0xafe <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     ae8:	80 91 10 02 	lds	r24, 0x0210
     aec:	88 23       	and	r24, r24
     aee:	49 f0       	breq	.+18     	; 0xb02 <__stack+0x3>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     af0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     af4:	80 ff       	sbrs	r24, 0
     af6:	f8 cf       	rjmp	.-16     	; 0xae8 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     af8:	80 91 e8 00 	lds	r24, 0x00E8
     afc:	8e 77       	andi	r24, 0x7E	; 126
     afe:	80 93 e8 00 	sts	0x00E8, r24
     b02:	08 95       	ret

00000b04 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     b04:	20 91 e4 00 	lds	r18, 0x00E4
     b08:	30 91 e5 00 	lds	r19, 0x00E5
     b0c:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     b0e:	40 91 ec 00 	lds	r20, 0x00EC
     b12:	84 2f       	mov	r24, r20
     b14:	81 70       	andi	r24, 0x01	; 1
     b16:	40 ff       	sbrs	r20, 0
     b18:	22 c0       	rjmp	.+68     	; 0xb5e <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b1a:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     b1e:	80 fd       	sbrc	r24, 0
     b20:	1c c0       	rjmp	.+56     	; 0xb5a <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b22:	80 91 10 02 	lds	r24, 0x0210

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b26:	88 23       	and	r24, r24
     b28:	91 f0       	breq	.+36     	; 0xb4e <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b2a:	85 30       	cpi	r24, 0x05	; 5
     b2c:	91 f0       	breq	.+36     	; 0xb52 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     b2e:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     b32:	85 fd       	sbrc	r24, 5
     b34:	10 c0       	rjmp	.+32     	; 0xb56 <Endpoint_WaitUntilReady+0x52>
     b36:	40 91 e4 00 	lds	r20, 0x00E4
     b3a:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     b3e:	42 17       	cp	r20, r18
     b40:	53 07       	cpc	r21, r19
     b42:	29 f3       	breq	.-54     	; 0xb0e <Endpoint_WaitUntilReady+0xa>
     b44:	9a 01       	movw	r18, r20
     b46:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     b48:	11 f7       	brne	.-60     	; 0xb0e <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     b4a:	84 e0       	ldi	r24, 0x04	; 4
     b4c:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b5e:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     b62:	42 ff       	sbrs	r20, 2
     b64:	de cf       	rjmp	.-68     	; 0xb22 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     b66:	08 95       	ret

00000b68 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     b70:	4b d0       	rcall	.+150    	; 0xc08 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b72:	52 d0       	rcall	.+164    	; 0xc18 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     b74:	c8 ed       	ldi	r28, 0xD8	; 216
     b76:	d0 e0       	ldi	r29, 0x00	; 0
     b78:	88 81       	ld	r24, Y
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
     b7e:	88 81       	ld	r24, Y
     b80:	80 68       	ori	r24, 0x80	; 128
     b82:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     b84:	88 81       	ld	r24, Y
     b86:	8f 7d       	andi	r24, 0xDF	; 223
     b88:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     b8a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     b8c:	10 92 10 02 	sts	0x0210, r1
	USB_Device_ConfigurationNumber  = 0;
     b90:	10 92 0c 02 	sts	0x020C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     b94:	10 92 0e 02 	sts	0x020E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     b98:	10 92 0d 02 	sts	0x020D, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     b9c:	00 ee       	ldi	r16, 0xE0	; 224
     b9e:	10 e0       	ldi	r17, 0x00	; 0
     ba0:	f8 01       	movw	r30, r16
     ba2:	80 81       	ld	r24, Z
     ba4:	8b 7f       	andi	r24, 0xFB	; 251
     ba6:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     ba8:	88 81       	ld	r24, Y
     baa:	81 60       	ori	r24, 0x01	; 1
     bac:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     bae:	42 e3       	ldi	r20, 0x32	; 50
     bb0:	60 e0       	ldi	r22, 0x00	; 0
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	53 df       	rcall	.-346    	; 0xa5c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     bb6:	e1 ee       	ldi	r30, 0xE1	; 225
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	8e 7f       	andi	r24, 0xFE	; 254
     bbe:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     bc0:	e2 ee       	ldi	r30, 0xE2	; 226
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	81 60       	ori	r24, 0x01	; 1
     bc8:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     bca:	80 81       	ld	r24, Z
     bcc:	88 60       	ori	r24, 0x08	; 8
     bce:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     bd0:	f8 01       	movw	r30, r16
     bd2:	80 81       	ld	r24, Z
     bd4:	8e 7f       	andi	r24, 0xFE	; 254
     bd6:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     bd8:	88 81       	ld	r24, Y
     bda:	80 61       	ori	r24, 0x10	; 16
     bdc:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	1f 91       	pop	r17
     be4:	0f 91       	pop	r16
     be6:	08 95       	ret

00000be8 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     be8:	e8 ed       	ldi	r30, 0xD8	; 216
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	8f 7e       	andi	r24, 0xEF	; 239
     bf0:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     bf2:	e7 ed       	ldi	r30, 0xD7	; 215
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	81 60       	ori	r24, 0x01	; 1
     bfa:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     bfc:	84 e0       	ldi	r24, 0x04	; 4
     bfe:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	80 93 0f 02 	sts	0x020F, r24

	USB_ResetInterface();
     c06:	b0 cf       	rjmp	.-160    	; 0xb68 <USB_ResetInterface>

00000c08 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     c08:	e8 ed       	ldi	r30, 0xD8	; 216
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8e 7f       	andi	r24, 0xFE	; 254
     c10:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     c12:	10 92 e2 00 	sts	0x00E2, r1
     c16:	08 95       	ret

00000c18 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     c18:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     c1c:	10 92 e1 00 	sts	0x00E1, r1
     c20:	08 95       	ret

00000c22 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     c22:	1f 92       	push	r1
     c24:	0f 92       	push	r0
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	0f 92       	push	r0
     c2a:	11 24       	eor	r1, r1
     c2c:	2f 93       	push	r18
     c2e:	3f 93       	push	r19
     c30:	4f 93       	push	r20
     c32:	5f 93       	push	r21
     c34:	6f 93       	push	r22
     c36:	7f 93       	push	r23
     c38:	8f 93       	push	r24
     c3a:	9f 93       	push	r25
     c3c:	af 93       	push	r26
     c3e:	bf 93       	push	r27
     c40:	ef 93       	push	r30
     c42:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     c44:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     c48:	82 ff       	sbrs	r24, 2
     c4a:	0a c0       	rjmp	.+20     	; 0xc60 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     c4c:	80 91 e2 00 	lds	r24, 0x00E2
     c50:	82 ff       	sbrs	r24, 2
     c52:	06 c0       	rjmp	.+12     	; 0xc60 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     c54:	80 91 e1 00 	lds	r24, 0x00E1
     c58:	8b 7f       	andi	r24, 0xFB	; 251
     c5a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     c5e:	ef d1       	rcall	.+990    	; 0x103e <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     c60:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     c64:	80 ff       	sbrs	r24, 0
     c66:	1d c0       	rjmp	.+58     	; 0xca2 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     c68:	80 91 d8 00 	lds	r24, 0x00D8
     c6c:	80 ff       	sbrs	r24, 0
     c6e:	19 c0       	rjmp	.+50     	; 0xca2 <__vector_10+0x80>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     c70:	80 91 da 00 	lds	r24, 0x00DA
     c74:	8e 7f       	andi	r24, 0xFE	; 254
     c76:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     c7a:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     c7e:	80 ff       	sbrs	r24, 0
     c80:	0c c0       	rjmp	.+24     	; 0xc9a <__vector_10+0x78>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c82:	80 e1       	ldi	r24, 0x10	; 16
     c84:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c86:	82 e1       	ldi	r24, 0x12	; 18
     c88:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     c8a:	09 b4       	in	r0, 0x29	; 41
     c8c:	00 fe       	sbrs	r0, 0
     c8e:	fd cf       	rjmp	.-6      	; 0xc8a <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	80 93 10 02 	sts	0x0210, r24
			EVENT_USB_Device_Connect();
     c96:	ff db       	rcall	.-2050   	; 0x496 <EVENT_USB_Device_Connect>
     c98:	04 c0       	rjmp	.+8      	; 0xca2 <__vector_10+0x80>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     c9a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     c9c:	10 92 10 02 	sts	0x0210, r1
			EVENT_USB_Device_Disconnect();
     ca0:	fb db       	rcall	.-2058   	; 0x498 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     ca2:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     ca6:	80 ff       	sbrs	r24, 0
     ca8:	18 c0       	rjmp	.+48     	; 0xcda <__vector_10+0xb8>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     caa:	80 91 e2 00 	lds	r24, 0x00E2
     cae:	80 ff       	sbrs	r24, 0
     cb0:	14 c0       	rjmp	.+40     	; 0xcda <__vector_10+0xb8>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     cb2:	80 91 e2 00 	lds	r24, 0x00E2
     cb6:	8e 7f       	andi	r24, 0xFE	; 254
     cb8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     cbc:	80 91 e2 00 	lds	r24, 0x00E2
     cc0:	80 61       	ori	r24, 0x10	; 16
     cc2:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     cc6:	80 91 d8 00 	lds	r24, 0x00D8
     cca:	80 62       	ori	r24, 0x20	; 32
     ccc:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     cd0:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     cd2:	85 e0       	ldi	r24, 0x05	; 5
     cd4:	80 93 10 02 	sts	0x0210, r24
		EVENT_USB_Device_Suspend();
     cd8:	b2 d1       	rcall	.+868    	; 0x103e <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     cda:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     cde:	84 ff       	sbrs	r24, 4
     ce0:	2f c0       	rjmp	.+94     	; 0xd40 <__vector_10+0x11e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     ce2:	80 91 e2 00 	lds	r24, 0x00E2
     ce6:	84 ff       	sbrs	r24, 4
     ce8:	2b c0       	rjmp	.+86     	; 0xd40 <__vector_10+0x11e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     cea:	80 e1       	ldi	r24, 0x10	; 16
     cec:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     cee:	82 e1       	ldi	r24, 0x12	; 18
     cf0:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     cf2:	09 b4       	in	r0, 0x29	; 41
     cf4:	00 fe       	sbrs	r0, 0
     cf6:	fd cf       	rjmp	.-6      	; 0xcf2 <__vector_10+0xd0>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     cf8:	80 91 d8 00 	lds	r24, 0x00D8
     cfc:	8f 7d       	andi	r24, 0xDF	; 223
     cfe:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     d02:	80 91 e1 00 	lds	r24, 0x00E1
     d06:	8f 7e       	andi	r24, 0xEF	; 239
     d08:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     d0c:	80 91 e2 00 	lds	r24, 0x00E2
     d10:	8f 7e       	andi	r24, 0xEF	; 239
     d12:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     d16:	80 91 e2 00 	lds	r24, 0x00E2
     d1a:	81 60       	ori	r24, 0x01	; 1
     d1c:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     d20:	80 91 0c 02 	lds	r24, 0x020C
     d24:	88 23       	and	r24, r24
     d26:	11 f0       	breq	.+4      	; 0xd2c <__vector_10+0x10a>
		  USB_DeviceState = DEVICE_STATE_Configured;
     d28:	84 e0       	ldi	r24, 0x04	; 4
     d2a:	07 c0       	rjmp	.+14     	; 0xd3a <__vector_10+0x118>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d2c:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     d30:	87 fd       	sbrc	r24, 7
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <__vector_10+0x116>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <__vector_10+0x118>
     d38:	83 e0       	ldi	r24, 0x03	; 3
     d3a:	80 93 10 02 	sts	0x0210, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     d3e:	7f d1       	rcall	.+766    	; 0x103e <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     d40:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     d44:	83 ff       	sbrs	r24, 3
     d46:	22 c0       	rjmp	.+68     	; 0xd8c <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     d48:	80 91 e2 00 	lds	r24, 0x00E2
     d4c:	83 ff       	sbrs	r24, 3
     d4e:	1e c0       	rjmp	.+60     	; 0xd8c <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     d50:	80 91 e1 00 	lds	r24, 0x00E1
     d54:	87 7f       	andi	r24, 0xF7	; 247
     d56:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     d5a:	82 e0       	ldi	r24, 0x02	; 2
     d5c:	80 93 10 02 	sts	0x0210, r24
		USB_Device_ConfigurationNumber = 0;
     d60:	10 92 0c 02 	sts	0x020C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     d64:	80 91 e1 00 	lds	r24, 0x00E1
     d68:	8e 7f       	andi	r24, 0xFE	; 254
     d6a:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     d6e:	80 91 e2 00 	lds	r24, 0x00E2
     d72:	8e 7f       	andi	r24, 0xFE	; 254
     d74:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     d78:	80 91 e2 00 	lds	r24, 0x00E2
     d7c:	80 61       	ori	r24, 0x10	; 16
     d7e:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     d82:	42 e3       	ldi	r20, 0x32	; 50
     d84:	60 e0       	ldi	r22, 0x00	; 0
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	69 de       	rcall	.-814    	; 0xa5c <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     d8a:	59 d1       	rcall	.+690    	; 0x103e <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     d8c:	ff 91       	pop	r31
     d8e:	ef 91       	pop	r30
     d90:	bf 91       	pop	r27
     d92:	af 91       	pop	r26
     d94:	9f 91       	pop	r25
     d96:	8f 91       	pop	r24
     d98:	7f 91       	pop	r23
     d9a:	6f 91       	pop	r22
     d9c:	5f 91       	pop	r21
     d9e:	4f 91       	pop	r20
     da0:	3f 91       	pop	r19
     da2:	2f 91       	pop	r18
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	0f 90       	pop	r0
     daa:	1f 90       	pop	r1
     dac:	18 95       	reti

00000dae <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     dae:	1f 93       	push	r17
     db0:	cf 93       	push	r28
     db2:	df 93       	push	r29
     db4:	cd b7       	in	r28, 0x3d	; 61
     db6:	de b7       	in	r29, 0x3e	; 62
     db8:	aa 97       	sbiw	r28, 0x2a	; 42
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	e1 e1       	ldi	r30, 0x11	; 17
     dc6:	f2 e0       	ldi	r31, 0x02	; 2
     dc8:	88 e0       	ldi	r24, 0x08	; 8
     dca:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     dcc:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     dd0:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     dd2:	8e 13       	cpse	r24, r30
     dd4:	fb cf       	rjmp	.-10     	; 0xdcc <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     dd6:	69 db       	rcall	.-2350   	; 0x4aa <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     dd8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     ddc:	83 ff       	sbrs	r24, 3
     dde:	17 c1       	rjmp	.+558    	; 0x100e <USB_Device_ProcessControlRequest+0x260>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     de0:	80 91 11 02 	lds	r24, 0x0211

		switch (USB_ControlRequest.bRequest)
     de4:	90 91 12 02 	lds	r25, 0x0212
     de8:	49 2f       	mov	r20, r25
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	4a 30       	cpi	r20, 0x0A	; 10
     dee:	51 05       	cpc	r21, r1
     df0:	08 f0       	brcs	.+2      	; 0xdf4 <USB_Device_ProcessControlRequest+0x46>
     df2:	0d c1       	rjmp	.+538    	; 0x100e <USB_Device_ProcessControlRequest+0x260>
     df4:	fa 01       	movw	r30, r20
     df6:	ea 5a       	subi	r30, 0xAA	; 170
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	4c c1       	rjmp	.+664    	; 0x1094 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     dfc:	80 38       	cpi	r24, 0x80	; 128
     dfe:	81 f0       	breq	.+32     	; 0xe20 <USB_Device_ProcessControlRequest+0x72>
     e00:	82 38       	cpi	r24, 0x82	; 130
     e02:	09 f0       	breq	.+2      	; 0xe06 <USB_Device_ProcessControlRequest+0x58>
     e04:	04 c1       	rjmp	.+520    	; 0x100e <USB_Device_ProcessControlRequest+0x260>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e06:	80 91 15 02 	lds	r24, 0x0215
     e0a:	8f 70       	andi	r24, 0x0F	; 15
     e0c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     e10:	80 91 eb 00 	lds	r24, 0x00EB
     e14:	85 fb       	bst	r24, 5
     e16:	88 27       	eor	r24, r24
     e18:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e1a:	10 92 e9 00 	sts	0x00E9, r1
     e1e:	06 c0       	rjmp	.+12     	; 0xe2c <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     e20:	80 91 0d 02 	lds	r24, 0x020D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     e24:	90 91 0e 02 	lds	r25, 0x020E
     e28:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     e2a:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e2c:	90 91 e8 00 	lds	r25, 0x00E8
     e30:	97 7f       	andi	r25, 0xF7	; 247
     e32:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     e36:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     e3a:	10 92 f1 00 	sts	0x00F1, r1
     e3e:	c4 c0       	rjmp	.+392    	; 0xfc8 <USB_Device_ProcessControlRequest+0x21a>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     e40:	28 2f       	mov	r18, r24
     e42:	2d 7f       	andi	r18, 0xFD	; 253
     e44:	09 f0       	breq	.+2      	; 0xe48 <USB_Device_ProcessControlRequest+0x9a>
     e46:	e3 c0       	rjmp	.+454    	; 0x100e <USB_Device_ProcessControlRequest+0x260>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     e48:	88 23       	and	r24, r24
     e4a:	19 f0       	breq	.+6      	; 0xe52 <USB_Device_ProcessControlRequest+0xa4>
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	61 f0       	breq	.+24     	; 0xe68 <USB_Device_ProcessControlRequest+0xba>
     e50:	de c0       	rjmp	.+444    	; 0x100e <USB_Device_ProcessControlRequest+0x260>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     e52:	80 91 13 02 	lds	r24, 0x0213
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	09 f0       	breq	.+2      	; 0xe5c <USB_Device_ProcessControlRequest+0xae>
     e5a:	d9 c0       	rjmp	.+434    	; 0x100e <USB_Device_ProcessControlRequest+0x260>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     e5c:	93 30       	cpi	r25, 0x03	; 3
     e5e:	09 f0       	breq	.+2      	; 0xe62 <USB_Device_ProcessControlRequest+0xb4>
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	80 93 0e 02 	sts	0x020E, r24
     e66:	2b c0       	rjmp	.+86     	; 0xebe <USB_Device_ProcessControlRequest+0x110>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     e68:	80 91 13 02 	lds	r24, 0x0213
     e6c:	81 11       	cpse	r24, r1
     e6e:	27 c0       	rjmp	.+78     	; 0xebe <USB_Device_ProcessControlRequest+0x110>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     e70:	80 91 15 02 	lds	r24, 0x0215
     e74:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     e76:	09 f4       	brne	.+2      	; 0xe7a <USB_Device_ProcessControlRequest+0xcc>
     e78:	ca c0       	rjmp	.+404    	; 0x100e <USB_Device_ProcessControlRequest+0x260>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e7a:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     e7e:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     e82:	20 ff       	sbrs	r18, 0
     e84:	1c c0       	rjmp	.+56     	; 0xebe <USB_Device_ProcessControlRequest+0x110>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     e86:	93 30       	cpi	r25, 0x03	; 3
     e88:	21 f4       	brne	.+8      	; 0xe92 <USB_Device_ProcessControlRequest+0xe4>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e8a:	80 91 eb 00 	lds	r24, 0x00EB
     e8e:	80 62       	ori	r24, 0x20	; 32
     e90:	14 c0       	rjmp	.+40     	; 0xeba <USB_Device_ProcessControlRequest+0x10c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     e92:	90 91 eb 00 	lds	r25, 0x00EB
     e96:	90 61       	ori	r25, 0x10	; 16
     e98:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     e9c:	21 e0       	ldi	r18, 0x01	; 1
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	a9 01       	movw	r20, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <USB_Device_ProcessControlRequest+0xfa>
     ea4:	44 0f       	add	r20, r20
     ea6:	55 1f       	adc	r21, r21
     ea8:	8a 95       	dec	r24
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <USB_Device_ProcessControlRequest+0xf6>
     eac:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
     eb0:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     eb4:	80 91 eb 00 	lds	r24, 0x00EB
     eb8:	88 60       	ori	r24, 0x08	; 8
     eba:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ebe:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ec2:	80 91 e8 00 	lds	r24, 0x00E8
     ec6:	87 7f       	andi	r24, 0xF7	; 247
     ec8:	82 c0       	rjmp	.+260    	; 0xfce <USB_Device_ProcessControlRequest+0x220>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     eca:	81 11       	cpse	r24, r1
     ecc:	a0 c0       	rjmp	.+320    	; 0x100e <USB_Device_ProcessControlRequest+0x260>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     ece:	10 91 13 02 	lds	r17, 0x0213
     ed2:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     ed4:	80 91 e3 00 	lds	r24, 0x00E3
     ed8:	80 78       	andi	r24, 0x80	; 128
     eda:	81 2b       	or	r24, r17
     edc:	80 93 e3 00 	sts	0x00E3, r24
     ee0:	80 91 e8 00 	lds	r24, 0x00E8
     ee4:	87 7f       	andi	r24, 0xF7	; 247
     ee6:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     eea:	ed dd       	rcall	.-1062   	; 0xac6 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     eec:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     ef0:	80 ff       	sbrs	r24, 0
     ef2:	fc cf       	rjmp	.-8      	; 0xeec <USB_Device_ProcessControlRequest+0x13e>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     ef4:	80 91 e3 00 	lds	r24, 0x00E3
     ef8:	80 68       	ori	r24, 0x80	; 128
     efa:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     efe:	11 11       	cpse	r17, r1
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <USB_Device_ProcessControlRequest+0x158>
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <USB_Device_ProcessControlRequest+0x15a>
     f06:	83 e0       	ldi	r24, 0x03	; 3
     f08:	80 93 10 02 	sts	0x0210, r24
     f0c:	80 c0       	rjmp	.+256    	; 0x100e <USB_Device_ProcessControlRequest+0x260>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f0e:	80 58       	subi	r24, 0x80	; 128
     f10:	82 30       	cpi	r24, 0x02	; 2
     f12:	08 f0       	brcs	.+2      	; 0xf16 <USB_Device_ProcessControlRequest+0x168>
     f14:	7c c0       	rjmp	.+248    	; 0x100e <USB_Device_ProcessControlRequest+0x260>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     f16:	80 91 13 02 	lds	r24, 0x0213
     f1a:	90 91 14 02 	lds	r25, 0x0214
     f1e:	8c 3d       	cpi	r24, 0xDC	; 220
     f20:	53 e0       	ldi	r21, 0x03	; 3
     f22:	95 07       	cpc	r25, r21
     f24:	71 f5       	brne	.+92     	; 0xf82 <USB_Device_ProcessControlRequest+0x1d4>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     f26:	83 e0       	ldi	r24, 0x03	; 3
     f28:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     f2a:	8a e2       	ldi	r24, 0x2A	; 42
     f2c:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     f2e:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     f30:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     f32:	de 01       	movw	r26, r28
     f34:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     f36:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     f38:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     f3a:	51 e2       	ldi	r21, 0x21	; 33
     f3c:	e3 2f       	mov	r30, r19
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	50 93 57 00 	sts	0x0057, r21
     f44:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     f46:	20 ff       	sbrs	r18, 0
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <USB_Device_ProcessControlRequest+0x1a2>
					{
						SerialByte >>= 4;
     f4a:	e2 95       	swap	r30
     f4c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     f4e:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     f50:	ef 70       	andi	r30, 0x0F	; 15
     f52:	8e 2f       	mov	r24, r30
     f54:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     f56:	ea 30       	cpi	r30, 0x0A	; 10
     f58:	10 f0       	brcs	.+4      	; 0xf5e <USB_Device_ProcessControlRequest+0x1b0>
     f5a:	c7 96       	adiw	r24, 0x37	; 55
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <USB_Device_ProcessControlRequest+0x1b2>
     f5e:	c0 96       	adiw	r24, 0x30	; 48
     f60:	8d 93       	st	X+, r24
     f62:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     f64:	2f 5f       	subi	r18, 0xFF	; 255
     f66:	24 31       	cpi	r18, 0x14	; 20
     f68:	49 f7       	brne	.-46     	; 0xf3c <USB_Device_ProcessControlRequest+0x18e>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     f6a:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f6c:	80 91 e8 00 	lds	r24, 0x00E8
     f70:	87 7f       	andi	r24, 0xF7	; 247
     f72:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     f76:	6a e2       	ldi	r22, 0x2A	; 42
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	ce 01       	movw	r24, r28
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	69 dc       	rcall	.-1838   	; 0x852 <Endpoint_Write_Control_Stream_LE>
     f80:	12 c0       	rjmp	.+36     	; 0xfa6 <USB_Device_ProcessControlRequest+0x1f8>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     f82:	ae 01       	movw	r20, r28
     f84:	4f 5f       	subi	r20, 0xFF	; 255
     f86:	5f 4f       	sbci	r21, 0xFF	; 255
     f88:	60 91 15 02 	lds	r22, 0x0215
     f8c:	8b db       	rcall	.-2282   	; 0x6a4 <CALLBACK_USB_GetDescriptor>
     f8e:	bc 01       	movw	r22, r24
     f90:	89 2b       	or	r24, r25
     f92:	09 f4       	brne	.+2      	; 0xf96 <USB_Device_ProcessControlRequest+0x1e8>
     f94:	3c c0       	rjmp	.+120    	; 0x100e <USB_Device_ProcessControlRequest+0x260>
     f96:	90 91 e8 00 	lds	r25, 0x00E8
     f9a:	97 7f       	andi	r25, 0xF7	; 247
     f9c:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	f9 dc       	rcall	.-1550   	; 0x998 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fa6:	80 91 e8 00 	lds	r24, 0x00E8
     faa:	8b 77       	andi	r24, 0x7B	; 123
     fac:	80 93 e8 00 	sts	0x00E8, r24
     fb0:	2e c0       	rjmp	.+92     	; 0x100e <USB_Device_ProcessControlRequest+0x260>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     fb2:	80 38       	cpi	r24, 0x80	; 128
     fb4:	61 f5       	brne	.+88     	; 0x100e <USB_Device_ProcessControlRequest+0x260>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fb6:	80 91 e8 00 	lds	r24, 0x00E8
     fba:	87 7f       	andi	r24, 0xF7	; 247
     fbc:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     fc0:	80 91 0c 02 	lds	r24, 0x020C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fc4:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fc8:	80 91 e8 00 	lds	r24, 0x00E8
     fcc:	8e 77       	andi	r24, 0x7E	; 126
     fce:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     fd2:	79 dd       	rcall	.-1294   	; 0xac6 <Endpoint_ClearStatusStage>
     fd4:	1c c0       	rjmp	.+56     	; 0x100e <USB_Device_ProcessControlRequest+0x260>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     fd6:	81 11       	cpse	r24, r1
     fd8:	1a c0       	rjmp	.+52     	; 0x100e <USB_Device_ProcessControlRequest+0x260>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     fda:	90 91 13 02 	lds	r25, 0x0213
     fde:	92 30       	cpi	r25, 0x02	; 2
     fe0:	b0 f4       	brcc	.+44     	; 0x100e <USB_Device_ProcessControlRequest+0x260>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fe2:	80 91 e8 00 	lds	r24, 0x00E8
     fe6:	87 7f       	andi	r24, 0xF7	; 247
     fe8:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     fec:	90 93 0c 02 	sts	0x020C, r25

	Endpoint_ClearStatusStage();
     ff0:	6a dd       	rcall	.-1324   	; 0xac6 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     ff2:	80 91 0c 02 	lds	r24, 0x020C
     ff6:	81 11       	cpse	r24, r1
     ff8:	06 c0       	rjmp	.+12     	; 0x1006 <USB_Device_ProcessControlRequest+0x258>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     ffa:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ffe:	87 fd       	sbrc	r24, 7
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <USB_Device_ProcessControlRequest+0x258>
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <USB_Device_ProcessControlRequest+0x25a>
    1006:	84 e0       	ldi	r24, 0x04	; 4
    1008:	80 93 10 02 	sts	0x0210, r24

	EVENT_USB_Device_ConfigurationChanged();
    100c:	46 da       	rcall	.-2932   	; 0x49a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    100e:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1012:	83 ff       	sbrs	r24, 3
    1014:	0a c0       	rjmp	.+20     	; 0x102a <USB_Device_ProcessControlRequest+0x27c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1016:	80 91 e8 00 	lds	r24, 0x00E8
    101a:	87 7f       	andi	r24, 0xF7	; 247
    101c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1020:	80 91 eb 00 	lds	r24, 0x00EB
    1024:	80 62       	ori	r24, 0x20	; 32
    1026:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    102a:	aa 96       	adiw	r28, 0x2a	; 42
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	08 95       	ret

0000103e <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    103e:	08 95       	ret

00001040 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1040:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1042:	80 91 10 02 	lds	r24, 0x0210
    1046:	88 23       	and	r24, r24
    1048:	99 f0       	breq	.+38     	; 0x1070 <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    104a:	c0 91 e9 00 	lds	r28, 0x00E9
    104e:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1050:	90 91 ec 00 	lds	r25, 0x00EC
    1054:	89 2f       	mov	r24, r25
    1056:	81 70       	andi	r24, 0x01	; 1
    1058:	90 fd       	sbrc	r25, 0
    105a:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    105c:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    105e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1062:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    1066:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    1068:	a2 de       	rcall	.-700    	; 0xdae <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    106a:	cf 70       	andi	r28, 0x0F	; 15
    106c:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1070:	cf 91       	pop	r28
    1072:	08 95       	ret

00001074 <Serial_SendData>:
	}
}

void Serial_SendData(const void* Buffer,
                     uint16_t Length)
{
    1074:	68 0f       	add	r22, r24
    1076:	79 1f       	adc	r23, r25
	while (Length--)
    1078:	86 17       	cp	r24, r22
    107a:	97 07       	cpc	r25, r23
    107c:	51 f0       	breq	.+20     	; 0x1092 <Serial_SendData+0x1e>
	  Serial_SendByte(*((uint8_t*)Buffer++));
    107e:	fc 01       	movw	r30, r24
    1080:	21 91       	ld	r18, Z+
    1082:	cf 01       	movw	r24, r30
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    1084:	30 91 c8 00 	lds	r19, 0x00C8
    1088:	35 ff       	sbrs	r19, 5
    108a:	fc cf       	rjmp	.-8      	; 0x1084 <Serial_SendData+0x10>
				UDR1 = DataByte;
    108c:	20 93 ce 00 	sts	0x00CE, r18
    1090:	f3 cf       	rjmp	.-26     	; 0x1078 <Serial_SendData+0x4>
}
    1092:	08 95       	ret

00001094 <__tablejump2__>:
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	05 90       	lpm	r0, Z+
    109a:	f4 91       	lpm	r31, Z
    109c:	e0 2d       	mov	r30, r0
    109e:	09 94       	ijmp

000010a0 <_exit>:
    10a0:	f8 94       	cli

000010a2 <__stop_program>:
    10a2:	ff cf       	rjmp	.-2      	; 0x10a2 <__stop_program>
